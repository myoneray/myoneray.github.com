<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>端口号被占用:8080</title>
      <link href="/2018/05/04/2018-05-04/"/>
      <url>/2018/05/04/2018-05-04/</url>
      <content type="html"><![CDATA[<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[  9:21上午 ]  [ maixiao@MaiziMacBook-Pro:~/git/upsmart-git/Mail(master✗) ]</span><br><span class="line">$ sudo lsof -i :8080</span><br><span class="line">Password:</span><br><span class="line">COMMAND   PID   <span class="built_in"> USER </span>  FD  <span class="built_in"> TYPE </span>           DEVICE SIZE/OFF NODE NAME</span><br><span class="line">java    56559 maixiao  106u <span class="built_in"> IPv6 </span>0x868a463357c247d      0t0  TCP *:http-alt (LISTEN)</span><br><span class="line">[  2:23下午 ]  [ maixiao@MaiziMacBook-Pro:~/git/upsmart-git/Mail(master✗) ]</span><br><span class="line">$ sudo  kill -9 56559</span><br><span class="line">[  2:23下午 ]  [ maixiao@MaiziMacBook-Pro:~/git/upsmart-git/Mail(master✗) ]</span><br><span class="line">$</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 端口 </tag>
            
            <tag> 8080 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UI-Router for Angular 1</title>
      <link href="/2016/12/06/2016-12-06/"/>
      <url>/2016/12/06/2016-12-06/</url>
      <content type="html"><![CDATA[<h1 id="AngularUI库提供的最有用的库之一：UI-ROUTER"><a href="#AngularUI库提供的最有用的库之一：UI-ROUTER" class="headerlink" title="AngularUI库提供的最有用的库之一：UI-ROUTER"></a>AngularUI库提供的最有用的库之一：UI-ROUTER</h1><p>本页介绍UI-ROUTER。</p><a id="more"></a><h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>UI-Router是在AngularJS中路由的规范标准。<br>受到Angula路由器<code>$route</code>和<a href="https://guides.emberjs.com/v2.5.0/routing/" target="_blank" rel="noopener">Ember路由器</a>的影响，UI-Router已成为在Angular 1中路由非简单应用程序的标准选择。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>NPM</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save angular-ui-router</span></span><br></pre></td></tr></table></figure></li><li><p>命令行<br>向项目中添加最新的预发布：<code>npm install --save angular-ui-router@next</code><br>向项目中添加特定版本：<code>npm install --save angular-ui-router@1.0.0-beta.1</code></p></li><li><p>在HTML中用<code>&lt;script&gt;</code>标签<br>最新的预发布: <code>&lt;script src=&quot;//unpkg.com/angular-ui-router/release/angular-ui-router.min.js&quot;&gt;</code><br>特定版本: <code>&lt;script src=&quot;//unpkg.com/angular-ui-router@0.3.1/release/angular-ui-router.js&quot;&gt;</code></p></li><li><p>bower</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">bower</span> <span class="selector-tag">install</span> <span class="selector-tag">angular-ui-router</span><span class="selector-id">#0</span><span class="selector-class">.3</span><span class="selector-class">.1</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>将ui.router注入到应用中<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">angulat.<span class="keyword">module</span>(<span class="string">'app'</span>,[<span class="string">'ui.router'</span>]);</span><br></pre></td></tr></table></figure></p><p>和<code>angular</code>内置服务<code>ngRouter</code>不同，<code>ui-router</code>是基于状态工作的，不是简单的url,因此可以将其镶嵌在视图中。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> ng-controller=<span class="string">"DemoController"</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> ui-view&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><ul><li>ng-view ==&gt; ui-view</li><li>ui-view的内置路由和状态有关系，所以只需要关心应用处于那种状态。</li><li>允许视图嵌套。</li></ul><p>用<code>.config</code>定义路由。将路由设置在 <strong>$routerProvider</strong> 上，而不是$stateProvider。<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$stateProvider</span></span><br><span class="line">    .<span class="keyword">state</span>('home', &#123;</span><br><span class="line">        url: '/home',</span><br><span class="line">        template: require('./index.html'),</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>这一步给路由配置了一个home的状态，当用户导航到/home时，应用程序会处于home状态，进而加载template中配置的index页面。</p><h1 id="1-template-templateUrl-templateProvider"><a href="#1-template-templateUrl-templateProvider" class="headerlink" title="1.template,templateUrl,templateProvider"></a>1.template,templateUrl,templateProvider</h1><p>视图设置模板的方式有三种：</p><ul><li>template：一个html字符串 OR 返回HTML的函数</li><li>templateUrl：一个模板路径 OR 返回模板路径的函数</li><li>templateProvider： 一个返回HTML字符的函数</li></ul><p>例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$stateProvider</span><br><span class="line">  .state(<span class="string">'app'</span>, &#123;</span><br><span class="line">    url: <span class="string">'/home'</span>,</span><br><span class="line">    <span class="comment">/*<span class="doctag">@ngInject</span>*/</span></span><br><span class="line">    templateProvider: ($q) =&gt; &#123;</span><br><span class="line">        let promise = $q((resolve) =&gt; &#123;</span><br><span class="line">            <span class="keyword">require</span>.ensure([], <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                resolve(<span class="keyword">require</span>(<span class="string">'./index.html'</span>));</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> promise;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="2-controller"><a href="#2-controller" class="headerlink" title="2.controller"></a>2.controller</h1><p>  为视图关联控制器，如果没有视图则不会创建该控制器。</p><h1 id="3-resolve"><a href="#3-resolve" class="headerlink" title="3.resolve"></a>3.resolve</h1><p>在angular-ui-router中resolve是一个对象：<br>其中：</p><ul><li>键就是你要注入到控制器中依赖的名称。</li><li>值就是待解析的这个factories。</li></ul><blockquote><p>如果传入的是一个字符串，angular-ui-router会和已经注册的服务进行匹配。<br>如果传入的是一个函数，angular-ui-router则会注册这个函数，函数返回值就是依赖。<br>如果传入的是一个promise，angular-ui-router会在控制器实例化之前解析，其值会被注册到控制器中。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$stateProvider</span><br><span class="line">    .state(<span class="string">'home'</span>, &#123;</span><br><span class="line">        url: <span class="string">'/home'</span>,</span><br><span class="line">        template: <span class="keyword">require</span>(<span class="string">'./index.html'</span>),</span><br><span class="line">        controller: <span class="string">'AppController'</span>,</span><br><span class="line">        controllerAs: <span class="string">'ctrl'</span>,</span><br><span class="line">        resolve: &#123;</span><br><span class="line">            <span class="comment">/*<span class="doctag">@ngInject</span>*/</span></span><br><span class="line">            load: ($q, $ocLazyLoad) =&gt; &#123;</span><br><span class="line">                let appControllerPromise = $q((resolve) =&gt; &#123;</span><br><span class="line">                    <span class="keyword">require</span>.ensure([], () =&gt; &#123;</span><br><span class="line">                        let module = <span class="keyword">require</span>(<span class="string">'./app.controller'</span>); <span class="comment">//babel6 export default</span></span><br><span class="line">                        $ocLazyLoad.load(&#123;</span><br><span class="line">                            name: module.name</span><br><span class="line">                        &#125;);</span><br><span class="line">                        resolve(module);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">return</span> $q.all([appControllerPromise]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h1 id="4-url"><a href="#4-url" class="headerlink" title="4.url"></a>4.url</h1><p>给应用程序的状态分配一个唯一URL。URL通过状态导航应用，而不是简单的通过URL导航。<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$stateProvider</span></span><br><span class="line">    .<span class="keyword">state</span>('home', &#123;</span><br><span class="line">        url: '/home',</span><br><span class="line">        template: require('./index.html'),</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>当用户导航到/home时，应用程序会处于home状态，进而加载template中配置的index页面将其填充到ui-view指令处。</p><h3 id="4-1url参数"><a href="#4-1url参数" class="headerlink" title="4.1url参数"></a>4.1url参数</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$stateProvider</span></span><br><span class="line">    .<span class="keyword">state</span>('home', &#123;</span><br><span class="line">        url: '/home/:indexId',</span><br><span class="line">        template: require('./index.html'),</span><br><span class="line">        controller:(<span class="variable">$scope</span>,<span class="variable">$stateParams</span>)=&gt;&#123;</span><br><span class="line">            <span class="variable">$scope</span>.indexId=<span class="variable">$stateParams</span>.indexId;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>当用户访问到 <code>/home/1</code>，<code>$stateParams.indexId</code>会变成<code>1</code>，因为<code>$stateParams</code>为<code>{indexId:1}</code>。</p><p>还可以用不同的语法：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$stateProvider</span></span><br><span class="line">    .<span class="keyword">state</span>('home', &#123;</span><br><span class="line">        url: '/home/&#123;indexId&#125;',</span><br><span class="line">        template: require('./index.html'),</span><br><span class="line">        controller:(<span class="variable">$scope</span>,<span class="variable">$stateParams</span>)=&gt;&#123;</span><br><span class="line">            <span class="variable">$scope</span>.indexId=<span class="variable">$stateParams</span>.indexId;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>还可以用正则：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$stateProvider</span><br><span class="line">    .state(<span class="string">'home'</span>, &#123;</span><br><span class="line">        url: <span class="string">'/home/&#123;indexId:[0-9a-fA-f]&#123;6&#125;&#125;'</span>,<span class="comment">//只能匹配十六进制的indexId</span></span><br><span class="line">        template: <span class="keyword">require</span>(<span class="string">'./index.html'</span>),</span><br><span class="line">        controller:($scope,$stateParams)=&gt;&#123;</span><br><span class="line">            $scope.indexId=$stateParams.indexId;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><blockquote><p>注意不能使用正则捕获数组。</p></blockquote><p>还可以在路由中指定查询参数：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$stateProvider</span></span><br><span class="line">    .<span class="keyword">state</span>('home', &#123;</span><br><span class="line">        url: '/home/inbox?sort=ascenging',</span><br><span class="line">        template: require('./index.html'),</span><br><span class="line">        controller:(<span class="variable">$scope</span>,<span class="variable">$stateParams</span>)=&gt;&#123;</span><br><span class="line">            <span class="variable">$scope</span>.indexId=<span class="variable">$stateParams</span>.indexId;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><h1 id="5-嵌套路由"><a href="#5-嵌套路由" class="headerlink" title="5.嵌套路由"></a>5.嵌套路由</h1><p>一个页面包含多个ui-view。<br>例如：在home的视图中，点击show billing链接将it’s billing! 加载到其下方。<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$stateProvider</span></span><br><span class="line">    .<span class="keyword">state</span>('home', &#123;</span><br><span class="line">        url: '/home/:inbox',</span><br><span class="line">        template: `</span><br><span class="line">        <span class="variable">&lt;div&gt;</span></span><br><span class="line">            <span class="variable">&lt;a ui-sref="home.billing"&gt;</span>show billing&lt;/a&gt;</span><br><span class="line">            <span class="variable">&lt;div ui-view&gt;</span>&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;`,</span><br><span class="line">        controller:(<span class="variable">$scope</span>,<span class="variable">$stateParams</span>)=&gt;&#123;</span><br><span class="line">            <span class="variable">$scope</span>.indexId=<span class="variable">$stateParams</span>.indexId;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="keyword">state</span>('home.billing', &#123;</span><br><span class="line">        url: '/billing',</span><br><span class="line">        template: `<span class="variable">&lt;div&gt;</span> it's billing! &lt;/div&gt;`</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><ul><li>/home/1 匹配第一个<code>/home/:inbox</code>路由状态</li><li>/home/1/billing 匹配第二个<code>home.billing</code>路由状态</li></ul><h1 id="6-params"><a href="#6-params" class="headerlink" title="6.params"></a>6.params</h1><h1 id="7-views"><a href="#7-views" class="headerlink" title="7.views"></a>7.views</h1><p>angular-ui-router的多命名视图。<br>在一个独立的视图中可以设置多个要引用的视图：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> ui-views=<span class="string">"iface"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> ui-views=<span class="string">"billing"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> ui-views=<span class="string">"account"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>设置views参数,template,templateUrl,templateProvider就会被忽略。<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$stateProvider</span><br><span class="line">    .state(<span class="string">'home'</span>, &#123;</span><br><span class="line">      views:&#123;</span><br><span class="line">      <span class="string">'iface'</span>:&#123;  </span><br><span class="line">        template: <span class="built_in">require</span>(<span class="string">'./index.html'</span>),</span><br><span class="line">        controller:<span class="function"><span class="params">($scope)</span>=&gt;</span>&#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      <span class="string">'billing'</span>:&#123;  </span><br><span class="line">        template: <span class="built_in">require</span>(<span class="string">'./index.html'</span>),</span><br><span class="line">        controller:<span class="function"><span class="params">($scope)</span>=&gt;</span>&#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      <span class="string">'account'</span>:&#123;  </span><br><span class="line">        template: <span class="built_in">require</span>(<span class="string">'./index.html'</span>),</span><br><span class="line">        controller:<span class="function"><span class="params">($scope)</span>=&gt;</span>&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="8-abstract"><a href="#8-abstract" class="headerlink" title="8.abstract"></a>8.abstract</h1><p>  抽象模板不能直接被激活，可以被字节点激活。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$stateProvider</span></span><br><span class="line">    .<span class="keyword">state</span>('home', &#123;</span><br><span class="line">        abstract:true, //父设置abstract属性：抽象模板</span><br><span class="line">        url: '/home',</span><br><span class="line">        template: `<span class="variable">&lt;div&gt;</span><span class="variable">&lt;div ui-view&gt;</span>&lt;/div&gt;&lt;/div&gt;`</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="keyword">state</span>('home.billing', &#123;</span><br><span class="line">        url: '/billing',//子节点</span><br><span class="line">        template: `<span class="variable">&lt;div&gt;</span> it's billing! &lt;/div&gt;`</span><br><span class="line">    &#125;</span><br><span class="line">    .<span class="keyword">state</span>('home.account', &#123;</span><br><span class="line">        url: '/account',//子节点</span><br><span class="line">        template: `<span class="variable">&lt;div&gt;</span> it's account! &lt;/div&gt;`</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h1 id="9-onEnter-onExit"><a href="#9-onEnter-onExit" class="headerlink" title="9.onEnter , onExit"></a>9.onEnter , onExit</h1><p>  视图进入，或者离开状态时触发的行为。</p><h1 id="10-data状态传递参数"><a href="#10-data状态传递参数" class="headerlink" title="10.data状态传递参数"></a>10.data状态传递参数</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$stateProvider.state(<span class="string">'app'</span>, &#123;</span><br><span class="line">    <span class="keyword">abstract</span>: <span class="keyword">true</span>,</span><br><span class="line">    <span class="comment">/*<span class="doctag">@ngInject</span>*/</span></span><br><span class="line">    templateProvider: ($q) =&gt; &#123;</span><br><span class="line">        let promise = $q((resolve) =&gt; &#123;</span><br><span class="line">            <span class="keyword">require</span>.ensure([], <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                resolve(<span class="keyword">require</span>(<span class="string">'./index.html'</span>));</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> promise;</span><br><span class="line">    &#125;,</span><br><span class="line">    controller: <span class="string">'AppController'</span>,</span><br><span class="line">    controllerAs: <span class="string">'ctrl'</span>,</span><br><span class="line">    resolve: &#123;&#125;,</span><br><span class="line">    data : &#123;</span><br><span class="line">        title : <span class="string">'首页'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>en：<a href="https://ui-router.github.io/ng1/" target="_blank" rel="noopener">https://ui-router.github.io/ng1/</a></p>]]></content>
      
      
        <tags>
            
            <tag> Angular </tag>
            
            <tag> ui-router </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Angular ngController</title>
      <link href="/2016/12/05/2016-12-05/"/>
      <url>/2016/12/05/2016-12-05/</url>
      <content type="html"><![CDATA[<h1 id="ngController"><a href="#ngController" class="headerlink" title="ngController"></a>ngController</h1><p>本页介绍ngController，以及如何通过 <code>$route</code>服务在路由中绑定控制器？？？？。</p><a id="more"></a><h2 id="ngController-1"><a href="#ngController-1" class="headerlink" title="ngController"></a>ngController</h2><p>ngController指令将控制器綁定到视图。这是Angular如何支持模型 - 视图 - 控制器设计模式背后原理的一个关键点。</p><p>Angular的MVC组件:</p><ul><li>模型(Model) - 模型是范围的属性;通过绑定访问作用域属性,作用域附加到DOM。</li><li>视图(View) - 呈现到视图中的模板（具有数据绑定的HTML）。</li><li>控制器(Controller) -ngController指令指定一个Controller类;该类包含应用程序后面的业务逻辑，用函数和值来装饰范围.</li></ul><blockquote><p>注意，您还可以通过 <code>$route</code>服务在路由定义它来将控制器绑定到DOM。一个常见的错误是在模板本身中使用<code>ng-controller</code>再次声明控制器。这将导致控制器连接和执行两次。</p></blockquote><p>如何通过 <code>$route</code>服务在路由中绑定控制器？？？？</p><h2 id="指令信息"><a href="#指令信息" class="headerlink" title="指令信息"></a>指令信息</h2><ul><li>此指令创建新范围。</li><li>此指令的执行优先级为500。</li></ul><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>作为元素：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-controller</span></span></span><br><span class="line"><span class="tag">  <span class="attr">ng-controller</span>=<span class="string">"expression"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-controller</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>作为属性：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ANY</span></span></span><br><span class="line"><span class="tag">  <span class="attr">ng-controller</span>=<span class="string">"expression"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ANY</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>类型</th><th>详细信息</th></tr></thead><tbody><tr><td>ngController</td><td>表达式</td><td>使用当前<code>$controllerProvider</code>注册函数名称或当前作用域上的表达式计算到函数的名称。通过指定<code>ng-controller =“as propertyName”</code>，可以将控制器实例发布到scope属性中。<code>$controllerProvider.allowGlobals()</code>设置全局，不推荐，已经弃用。</td></tr></tbody></table><p>en：<a href="https://docs.angularjs.org/api/ng/directive/ngController" target="_blank" rel="noopener">https://docs.angularjs.org/api/ng/directive/ngController</a></p>]]></content>
      
      
        <tags>
            
            <tag> Angular </tag>
            
            <tag> ngController </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Angular Bootstrap</title>
      <link href="/2016/12/02/2016-12-02/"/>
      <url>/2016/12/02/2016-12-02/</url>
      <content type="html"><![CDATA[<h1 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h1><p>本页介绍Angular初始化过程，以及如何在需要的时候手动初始化Angular。</p><a id="more"></a><h2 id="Angular-lt-script-gt-Tag"><a href="#Angular-lt-script-gt-Tag" class="headerlink" title="Angular&lt;script&gt;Tag"></a>Angular<code>&lt;script&gt;</code>Tag</h2><p>Angular自动初始化时,我们建议这样导入文件路径.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:ng</span>=<span class="string">"http://angularjs.org"</span> <span class="attr">ng-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol><li>将<code>script</code>标签放在页面底部。在页面末尾放置脚本标记可以提高应用程序加载时间，因为<abbr title="">加载angular.js脚本不会阻止HTML的加载</abbr>。<br>你可以从<a href="http://code.angularjs.org" target="_blank" rel="noopener">这儿</a>获取最新的代码。请不要将你的生产代码链接到此网址，因为它会暴露你网站上的安全漏洞。对于开发链接到我们的网站是好的。<blockquote><p>选择<code>angular-[version].js</code>为可读的文件，适合开发和调试。<br>选择<code>angular-[version].min.js</code>为压缩的文件，适合在生产中使用。</p></blockquote></li><li>如果你希望Angularjs自动引导你的应用程序，请将ng-app放置到应用程序的根目录，通常在<html>标签上。</html></li><li>不推荐在旧版本的IE上使用angularjs。</li></ol><h2 id="自动初始化"><a href="#自动初始化" class="headerlink" title="自动初始化"></a>自动初始化</h2><p>angular在<code>DOMContentLoaded</code>事件时自动初始化或者当angular.js脚本被评估为<code>document.readyState</code>设置为“完成”。这这个时间点上，Angular寻找指定你的应用程序根目录的ngApp指令。如果找到ngApp指令，那么Angular将：</p><ul><li>加载与指令相关联的模块。</li><li>创建应用程序注入器。</li><li>编译处理ngApp指令的DOM作为编译的最基层。这允许你告诉angular只处理DOM的一部分作为一个Angular应用程序。</li></ul><p><img src="/img/concepts-startup.png" alt=""></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!doctype html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"optionalModuleName"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    I can add: </span><span class="template-variable">&#123;&#123; 1+2 &#125;&#125;</span><span class="xml">.</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>作为最佳实践，考虑在ng-app的相同元素上添加<code>ng-strict-di</code>指令：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!doctype html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"optionalModuleName"</span> <span class="attr">ng-strict-di</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    I can add: </span><span class="template-variable">&#123;&#123; 1+2 &#125;&#125;</span><span class="xml">.</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>这将确保你的应用程序中的所有服务都已正确注释。请参阅<a href="https://docs.angularjs.org/guide/di#using-strict-dependency-injection" target="_blank" rel="noopener">这儿</a> 了解<strong>依赖注入严格模式</strong>。</p><h2 id="手动初始化"><a href="#手动初始化" class="headerlink" title="手动初始化"></a>手动初始化</h2><p>如果你需要更多地控制初始化过程，可以改用手动引导方法。当你需要这样做需要在Angular编译页面之前执行操作。</p><p>这里是一个手动初始化Angular的例子：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!doctype html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"MyController"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    Hello </span><span class="template-variable">&#123;&#123;greetMe&#125;&#125;</span><span class="xml">!</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.angularjs.org/snapshot/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">    angular.module('myApp', [])</span></span><br><span class="line"><span class="xml">      .controller('MyController', ['$scope', function ($scope) &#123;</span></span><br><span class="line"><span class="xml">        $scope.greetMe = 'World';</span></span><br><span class="line"><span class="xml">      &#125;]);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    angular.element(function() &#123;</span></span><br><span class="line"><span class="xml">      angular.bootstrap(document, ['myApp']);</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p> 注意: 要加载到注入器中的应用程序模块的名称作为angular.bootstrap函数的第二个参数。<br> 请注意，angular.bootstrap不会即时创建模块,只会在启动时创建模块,因此在作为参数传递之前，必须确保创建其所有的自定义模块。<br>你调用<code>angular.bootstrap()</code>,就已经加载到了所有自定义模块。你不能在应用程序启动后添加控制器，服务，指令等。</p><blockquote><p>注意：在手动引导应用程序时，不应使用<code>ng-app</code>指令。</p></blockquote><p>这是你的代码应该遵循的顺序：</p><ol><li>在页面和所有代码加载后，找到你的AngularJS应用程序的根元素，它通常是文档的根。</li><li>调用<code>angular.bootstrap</code>将元素编译成可执行文件，双向绑定应用程序。</li></ol><h3 id="谨记"><a href="#谨记" class="headerlink" title="谨记"></a>谨记</h3><p>有几个事情要记住，不管自动或手动引导：</p><ul><li>虽然每页可以引导多个AngularJS应用程序，但不建议这么做。这可能会遇到问题，特别是与复杂的应用程序，所以提醒你需要谨慎。</li><li>不要在具有使用转换的指令的元素上引导应用程序，例如<code>ngIf</code>，<code>ngInclude</code>和<code>ngView</code>。<br> 这样做会错误地放置应用程序<code>$rootElement</code>和应用程序的注入器，导致动画停止工作，并使应用程序外部无法访问注入器。</li></ul><h2 id="延迟引导"><a href="#延迟引导" class="headerlink" title="延迟引导"></a>延迟引导</h2><p>这个功能使得像Batarang和测试运行程序这样的工具可以在AngularJS的引导进程中，并在更多的模块中依赖注入进来.其可以替代或增加依赖注入服务以用于仪器化或模拟重度依赖性。<br>如果window.name包含前缀NG_DEFER_BOOTSTRAP！当angular.bootstrap被调用时，引导进程将被暂停，直到angular.resumeBootstrap（）被调用。<br>angular.resumeBootstrap（）采用一个可选的模块数组，应该添加到应用程序即将被引导的模块的原始列表中。</p><p>en:<a href="https://docs.angularjs.org/guide/bootstrap" target="_blank" rel="noopener">https://docs.angularjs.org/guide/bootstrap</a></p>]]></content>
      
      
        <tags>
            
            <tag> Angular </tag>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS文件引入</title>
      <link href="/2016/12/01/2016-12-01/"/>
      <url>/2016/12/01/2016-12-01/</url>
      <content type="html"><![CDATA[<h1 id="materialize-css文件引用"><a href="#materialize-css文件引用" class="headerlink" title="materialize.css文件引用"></a>materialize.css文件引用</h1><a id="more"></a><p>之前引用：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'~materialize-css/sass/materialize.scss'</span>;</span><br></pre></td></tr></table></figure></p><blockquote><p>然后报错：Module not found: Error: Cannot resolve ‘file’ or ‘directory’ ../fonts/roboto/Roboto-Bold.ttf in /home/xxxxxxxxxxx/src/assets/sass resolve file……………………..</p></blockquote><p>之后尝试修改引用node_modules文件中的资源，由引用SASS修改为应用 CSS文件。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'~materialize-css/dist/css/materialize.css'</span>;</span><br></pre></td></tr></table></figure></p><p>在app.mpdule.js中加载文件：<code>import &#39;materialize-css&#39;;</code>不用加载其到 Angular中去。</p><p>没有报错啦～～</p>]]></content>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> Angular </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>html-webpack-plugin-②</title>
      <link href="/2016/11/30/2016-11-30-1/"/>
      <url>/2016/11/30/2016-11-30-1/</url>
      <content type="html"><![CDATA[<p>webpack 配置html-webpack-plugin<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">let path</span> = require(<span class="string">'path'</span>);</span><br><span class="line"><span class="attribute">let HtmlWebpackPlugin</span> = require(<span class="string">'html-webpack-plugin'</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugin<span class="variable">s:</span> [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        template: path.<span class="built_in">resolve</span>(<span class="string">'./src/index.html'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><p>公司有一个大神搭建的项目，有许多地方设计的很巧妙。<br>虚心研究，一直有一个疑惑，并没有在项目HTML中看到任何src 文件的引用，项目是如何加在资源文件的？<br>上次框架搭建过程中没有研究清楚，这次在新项目中仔细研究搭建过程。</p><h3 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h3><ul><li>这个插件的作用是依据一个简单的模板，帮你生成最终的Html5文件。</li><li>这个<abbr title="问题解决！！！">文件中自动引用了你打包后的JS文件</abbr>。</li><li>每次编译都在文件名中插入一个不同的哈希值。</li></ul><p><strong>安装</strong><br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> html-webpack-plugin</span><br></pre></td></tr></table></figure></p><blockquote><p>创建Html模板页面，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件。</p></blockquote><p>此时项目结构如下图所示<br><img src="/img/2016-11-30.png" alt=""></p><p>Webpack详细配置 （37行）：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool: <span class="string">'eval-source-map'</span>,</span><br><span class="line">    entry: __dirname + <span class="string">"/src/app/app.module.js"</span>,</span><br><span class="line">    <span class="comment">// entry: __dirname + "/src/bootstrap.js",</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">"/dist"</span>,</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">module</span>: &#123;</span><br><span class="line">        loaders: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.json$/</span>, <span class="comment">//在配置文件里添加JSON loader</span></span><br><span class="line">            loader: <span class="string">"json"</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            loader: <span class="string">'babel'</span> <span class="comment">//在webpack的module部分的loaders里进行配置即可</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            loader: <span class="string">'style!css'</span> <span class="comment">//添加对样式表的处理</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">"./src/"</span>, <span class="comment">//本地服务器所加载的页面所在的目录</span></span><br><span class="line">        colors: <span class="literal">true</span>, <span class="comment">//终端中输出结果为彩色</span></span><br><span class="line">        historyApiFallback: <span class="literal">true</span>, <span class="comment">//不跳转</span></span><br><span class="line">        inline: <span class="literal">true</span> <span class="comment">//实时刷新</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">"Copyright upsmart."</span>), <span class="comment">//在这个数组中new一个就可以了</span></span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(), <span class="comment">//热加载插件</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: path.resolve(<span class="string">'./src/index.html'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>index.html：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Sample Project<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Webpack Sample Project<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'root'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>以上！</p>]]></content>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>path.resolve([...paths])解释</title>
      <link href="/2016/11/30/2016-11-30-2/"/>
      <url>/2016/11/30/2016-11-30-2/</url>
      <content type="html"><![CDATA[<h1 id="path-resolve"><a href="#path-resolve" class="headerlink" title="path.resolve"></a>path.resolve</h1><p>nodejs官方文档原文：<a href="https://nodejs.org/api/path.html#path_path_resolve_paths" target="_blank" rel="noopener">https://nodejs.org/api/path.html#path_path_resolve_paths</a></p><p>初始添加在版本: v0.3.4</p><ul><li>paths <string> 路径或路径段</string></li><li><p>返回: <string><code>path.resolve（）</code>方法将一系列路径或路径段解析为绝对路径。</string></p><a id="more"></a></li><li><p>给定的路径序列从右到左进行处理，每个后续路径前置直到构造绝对路径。<br>例如，给定路径段序列：<code>/ foo，/ bar，baz，</code>调用<code>path.resolve（&#39;/ foo&#39;，&#39;/ bar&#39;，&#39;baz&#39;）</code>将返回<code>/ bar / baz</code>。</p></li><li>如果在处理所有给定路径段之后还没有生成绝对路径，则使用当前工作目录。</li><li>生成的路径将进行规范化，并删除尾部斜杠，除非将路径解析为根目录。</li><li>忽略零长度路径段。</li><li>如果没有传递路径段，path.resolve（）将返回当前工作目录的绝对路径。</li></ul><p>例如：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">path.resolve(<span class="string">'/foo/bar'</span>, <span class="string">'./baz'</span>)</span><br><span class="line"><span class="regexp">//</span> Returns: <span class="string">'/foo/bar/baz'</span></span><br><span class="line"></span><br><span class="line">path.resolve(<span class="string">'/foo/bar'</span>, <span class="string">'/tmp/file/'</span>)</span><br><span class="line"><span class="regexp">//</span> Returns: <span class="string">'/tmp/file'</span></span><br><span class="line"></span><br><span class="line">path.resolve(<span class="string">'wwwroot'</span>, <span class="string">'static_files/png/'</span>, <span class="string">'../gif/image.gif'</span>)</span><br><span class="line"><span class="regexp">//</span> 如果当前工作目录是 <span class="regexp">/home/my</span>self<span class="regexp">/node,返回 '/</span>home<span class="regexp">/myself/</span>node<span class="regexp">/wwwroot/</span>static_files<span class="regexp">/gif/im</span>age.gif<span class="string">'</span></span><br></pre></td></tr></table></figure></p><p>如果任何参数不是字符串，则抛出<code>TypeError</code>。</p><h4 id="Class-TypeError"><a href="#Class-TypeError" class="headerlink" title="Class: TypeError"></a>Class: TypeError</h4><p>Error子类，指示提供的参数不是允许的类型。例如，将函数传递给期望字符串的参数将被视为TypeError。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'url'</span>).parse(<span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;);</span><br><span class="line">  <span class="comment">// throws TypeError, since it expected a string</span></span><br></pre></td></tr></table></figure></p><p>Node.js将立即生成并抛出TypeError实例作为参数验证的形式。</p>]]></content>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Angular指令数据绑定</title>
      <link href="/2016/11/23/2016-11-23-1/"/>
      <url>/2016/11/23/2016-11-23-1/</url>
      <content type="html"><![CDATA[<blockquote><p>准备项目示例<br> 参考源码： <a href="https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html" target="_blank" rel="noopener">https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html</a><br> <a id="more"></a></p></blockquote><ul><li>Angular数据绑定有几种类型?</li><li>Angular如何修改内联绑定符  <code></code> ?</li><li>Angular如何隐藏模板标记?</li><li>Angular scope如何工作?</li><li><p>Angular ng-bind 与 ng-bind-template区别?</p><pre><code><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">     There are <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-bind</span>=<span class="string">"todos.length"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> items</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-bind-template</span>=</span></span></span><br><span class="line"><span class="xml">      "First: </span><span class="template-variable">&#123;&#123;todos[0].<span class="builtin-name">action</span>&#125;&#125;</span><span class="xml">. Second: </span><span class="template-variable">&#123;&#123;todos[1].<span class="builtin-name">action</span>&#125;&#125;</span><span class="xml">"&gt;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>说明：`ng-bind` 只能处理单个数据绑定表达式， `ng-bind-template`可以处理多个数据绑定。所以一般用内联绑定符   {{  和 }}  （双括号，草拟娘的，hexo编译会自动屏蔽双大括号这个符号，MB~）  绑定数据。 傻子才会用这两个。O(∩_∩)O~</code></pre></li><li><p>asd</p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Angular </tag>
            
            <tag> angular基础 </tag>
            
            <tag> 数据绑定 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Angular应用刨析</title>
      <link href="/2016/11/09/2016-11-23-2/"/>
      <url>/2016/11/09/2016-11-23-2/</url>
      <content type="html"><![CDATA[<h4 id="9-1-准备项目示例"><a href="#9-1-准备项目示例" class="headerlink" title="9.1 准备项目示例"></a>9.1 准备项目示例</h4><p> 参考源码： <a href="https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html" target="_blank" rel="noopener">https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html</a></p> <a id="more"></a><h4 id="9-2-使用模块工作"><a href="#9-2-使用模块工作" class="headerlink" title="9.2 使用模块工作"></a>9.2 使用模块工作</h4><p>创建模块：<br>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> <span class="attribute">myApp</span>=angular.module('exampleApp',[])</span><br></pre></td></tr></table></figure></p><p>  module方法接受三个参数，但通常只使用前两个参数。 惯例给模块App的后缀名。<br>  这个习惯清楚的体现出模块代表的是代码结构的顶层。这个做会在多模块的复杂应用中很有用。</p><p>模块方法接受的参数：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>新模块的名称</td></tr><tr><td>requires</td><td>该模块所依赖的模块集合</td></tr><tr><td>config</td><td>改模块的配置。等同于Module.config方法</td></tr></tbody></table><p>注意<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> <span class="attribute">myApp</span>=angular.module('exampleApp')</span><br></pre></td></tr></table></figure></p><p>这样忽略requires参数，结果是模块试图查找一个之前创建的exampleApp的模块。<br>而不是创建一个新的。而且通常会报错，没报错就说明已经有一个同名的模块。</p><p>在HTML中引应用ng-app属性：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html <span class="attribute">ng-app</span>=<span class="string">"exampleApp"</span>&gt;</span><br></pre></td></tr></table></figure></p><p>ng-app属性是在angularjs生命周期的bootstrap阶段被使用。不同于bootstrap CSS框架哦。</p><h4 id="9-3-使用模块定义AngularJS组件"><a href="#9-3-使用模块定义AngularJS组件" class="headerlink" title="9.3 使用模块定义AngularJS组件"></a>9.3 使用模块定义AngularJS组件</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>animation</td><td>动画特性</td></tr><tr><td>config</td><td>注册一个在模块加载时对模块的配置函数</td></tr><tr><td>constant</td><td>定义一个返回常亮服务</td></tr><tr><td>controller</td><td>创建控制器</td></tr><tr><td>directiv</td><td>创建一个指令</td></tr><tr><td>factory</td><td>创建一个服务</td></tr><tr><td>filter</td><td>创建一个过滤器</td></tr><tr><td>provider</td><td>创建一个服务</td></tr><tr><td>name</td><td>返回模块名</td></tr><tr><td>run</td><td>注册一个在angularJS加载完毕后用于对所有模块配置的函数</td></tr><tr><td>service</td><td>创建一个服务</td></tr><tr><td>vaiue</td><td>定义一个返回常量服务</td></tr></tbody></table><p>Module的对象定义的方法可以范围三类：</p><ul><li>为angulJS程序定义组件</li><li>使得</li></ul>]]></content>
      
      
        <tags>
            
            <tag> Angular </tag>
            
            <tag> angular基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Angular Material Dynamic Themes | 动态主题</title>
      <link href="/2016/11/09/2016-11-09/"/>
      <url>/2016/11/09/2016-11-09/</url>
      <content type="html"><![CDATA[<p>先看效果： <a href="http://codepen.io/myoneray/pen/RoWGmp?editors=1010" target="_blank" rel="noopener">http://codepen.io/myoneray/pen/RoWGmp?editors=1010</a></p><p>angular Material 主题的修改主要围绕 <code>$mdThemingProvider</code>服务展开：</p><a id="more"></a><ul><li>提供程序配置<code>$ mdTheming</code>服务</li></ul><h4 id="默认主题"><a href="#默认主题" class="headerlink" title="默认主题"></a>默认主题</h4><p><code>$mdThemingProvider</code>默认使用一下配置:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Primary <span class="string">Palette:</span> Primary</span><br><span class="line">Accent <span class="string">Palette:</span> Pink</span><br><span class="line">Warn <span class="string">Palette:</span> Deep-Orange</span><br><span class="line">Background <span class="string">Palette:</span> Grey</span><br></pre></td></tr></table></figure></p><h4 id="修改默认主题"><a href="#修改默认主题" class="headerlink" title="修改默认主题"></a>修改默认主题</h4><p>如果你不想在元素本身使用<code>md-theme</code>指令，覆盖默认主题。<br>你可以使用下面的方式：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">myAppModule</span><span class="selector-class">.config</span>(function($mdThemingProvider) &#123;</span><br><span class="line">  $<span class="selector-tag">mdThemingProvider</span></span><br><span class="line">    <span class="selector-class">.theme</span>(<span class="string">'default'</span>)</span><br><span class="line">    <span class="selector-class">.primaryPalette</span>(<span class="string">'blue'</span>)</span><br><span class="line">    <span class="selector-class">.accentPalette</span>(<span class="string">'teal'</span>)</span><br><span class="line">    <span class="selector-class">.warnPalette</span>(<span class="string">'red'</span>)</span><br><span class="line">    <span class="selector-class">.backgroundPalette</span>(<span class="string">'grey'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="动态主题"><a href="#动态主题" class="headerlink" title="动态主题"></a>动态主题</h4><p>默认情况下，如果在运行时更改主题，<code>$ mdTheming</code>服务将不会检测到这些更改。<br>如果你有一个应用程序，在运行时更改其主题，你必须启用主题监测：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myAppModule.config(<span class="function"><span class="keyword">function</span><span class="params">($mdThemingProvider)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Enable theme watching.</span></span><br><span class="line">  $mdThemingProvider.alwaysWatchTheme(<span class="keyword">true</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="自定义主题样式"><a href="#自定义主题样式" class="headerlink" title="自定义主题样式"></a>自定义主题样式</h4><p>有时你可能想要为自定义组件使用自己的主题。<br>你可以使用以下标记注册您自己的样式：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myAppModule.config(<span class="function"><span class="keyword">function</span><span class="params">($mdThemingProvider)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Register our custom stylesheet into the theming provider.</span></span><br><span class="line">  $mdThemingProvider.registerStyles(STYLESHEET);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>registerStyles</code>方法只接受字符串作为值，所以你实际上不能将外部样式表文件加载到<code>$ mdThemingProvider</code>。<br>如果需要加载外部样式表，我们建议使用打包工具，它支持包括原始内容，如<code>webpack</code>的<code>raw-loader</code>：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myAppModule.config(<span class="function"><span class="keyword">function</span><span class="params">($mdThemingProvider)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Register your custom stylesheet into the theming provider.</span></span><br><span class="line">  $mdThemingProvider.registerStyles(<span class="keyword">require</span>(<span class="string">'../styles/my-component.theme.css'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="浏览器颜色"><a href="#浏览器颜色" class="headerlink" title="浏览器颜色"></a>浏览器颜色</h4><p>启用浏览器标题着色更多信息请访问：<br><a href="https://developers.google.com/web/fundamentals/design-and-ui/browser-customization/theme-color" target="_blank" rel="noopener">https://developers.google.com/web/fundamentals/design-and-ui/browser-customization/theme-color</a></p><p>选项参数：<br><code>theme</code> - 通过<code>$ mdThemeProvider</code>定义的主题来使用调色板。默认为默认主题。<br><code>palette</code>- 可以是基本材质设计调色板，扩展定义调色板和 ‘primary’, ‘accent’, ‘background’ 和 ‘warn’中的任何一个。默认值为primary。<br><code>hue</code> - 来自所选调色板的色调。默认值为800</p><p>例如一下配置：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">myAppModule.config(<span class="keyword">function</span>(<span class="variable">$mdThemingProvider</span>) &#123;</span><br><span class="line">  <span class="regexp">//</span> Enable browser color</span><br><span class="line">  <span class="variable">$mdThemingProvider</span>.enableBrowserColor(&#123;</span><br><span class="line">    theme: <span class="string">'myTheme'</span>, <span class="regexp">//</span> Default is <span class="string">'default'</span></span><br><span class="line">    palette: <span class="string">'accent'</span>, <span class="regexp">//</span> Default is <span class="string">'primary'</span>, any basic material palette and extended palettes are available</span><br><span class="line">    hue: <span class="string">'200'</span> <span class="regexp">//</span> Default is <span class="string">'800'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><code>$mdThemingProvider.registerStyles(styles);</code></li></ul><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>styles</td><td>string</td><td>Angular Material的内置主题css中的样式。</td></tr></tbody></table><ul><li><code>$mdThemingProvider.setNonce(nonceValue);</code></li></ul><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>  nonceValue</td><td>string</td><td>要作为属性添加到主题样式标签的随机数。设置值允许使用CSP策略，而不使用unsafe-inline指令。</td></tr></tbody></table><ul><li><code>$mdThemingProvider.setDefaultTheme(themeName);</code></li></ul><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>  themeName</td><td>string</td><td>要应用于元素的默认主题名称。默认值为default。</td></tr></tbody></table><ul><li><code>$mdThemingProvider.alwaysWatchTheme(watch);</code></li></ul><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td> watch</td><td>boolean</td><td>是否总是观察主题的变化和重新应用类，当他们改变。默认值为false。启用可能会降低性能。</td></tr></tbody></table><ul><li><code>$mdThemingProvider.enableBrowserColor([options]);</code></li></ul><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td> options</td><td>Object</td><td><code>theme</code> - 通过<code>$ mdThemeProvider</code>定义的主题来使用调色板。默认为默认主题。<code>palette</code>- 可以是基本材质设计调色板，扩展定义调色板和 ‘primary’, ‘accent’, ‘background’ 和 ‘warn’中的任何一个。默认值为primary。<code>hue</code> - 来自所选调色板的色调。默认值为800</td></tr></tbody></table><table><thead><tr><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td> Function</td><td>删除浏览器颜色的功能</td></tr></tbody></table><p>注：<br>本文主要围绕解释阐述主题配置的，详细配置可以参考：<a href="https://material.angularjs.org/latest/Theming/01_introduction" target="_blank" rel="noopener">https://material.angularjs.org/latest/Theming/01_introduction</a></p>]]></content>
      
      
        <tags>
            
            <tag> Angular Material </tag>
            
            <tag> Dynamic Themes </tag>
            
            <tag> Themes </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Material设置当前字体为主题默认颜色</title>
      <link href="/2016/11/08/2016-11-08/"/>
      <url>/2016/11/08/2016-11-08/</url>
      <content type="html"><![CDATA[<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">md-colors</span>=<span class="string">"&#123;color:'primary'&#125;"</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><p>Angular Material 默认不支持字体颜色，如下方法可以设置当前字体为主题默认颜色：<br><code>&lt;h2  md-colors=&quot;{color:&#39;primary&#39;}&quot;&gt; 账号系统 &lt;small class=&quot;md-caption&quot;&gt;/ 账户管理&lt;/small&gt;&lt;/h2&gt;</code></p><p>see: <a href="http://stackoverflow.com/questions/28487327/how-to-set-text-color-in-angular-material?answertab=active#tab-top" target="_blank" rel="noopener">http://stackoverflow.com/questions/28487327/how-to-set-text-color-in-angular-material?answertab=active#tab-top</a></p></li><li><p>angular验证：<br><md-input-container class="md-block" flex-gt-sm=""></md-input-container></p><pre><code>&lt;label&gt;账号&lt;/label&gt;&lt;input ng-model=&quot;ctrl.account&quot; name=&quot;account&quot; ng-pattern=&quot;/^[A-Za-z0-9]{1,10}$/&quot;&gt;&lt;div ng-messages=&quot;表单名.输入框名.$error&quot; role=&quot;alert&quot; multiple&gt;    &lt;div ng-message=&quot;pattern&quot; class=&quot;my-message&quot;&gt;请输入十个字符以内的数字字母    &lt;/div&gt;&lt;/div&gt;</code></pre><p> </p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Angular Material </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>修改仓库地址</title>
      <link href="/2016/10/25/2016-10-25/"/>
      <url>/2016/10/25/2016-10-25/</url>
      <content type="html"><![CDATA[<h5 id="修改仓库地址"><a href="#修改仓库地址" class="headerlink" title="修改仓库地址"></a>修改仓库地址</h5><ul><li>清除git项目仓库地址<code>git remote rm  origin</code></li><li>添加git项目仓库地址<code>git remote add origin http://example.git</code><a id="more"></a></li></ul><h5 id="npm-常用包"><a href="#npm-常用包" class="headerlink" title="npm 常用包"></a>npm 常用包</h5><ul><li>安装webpack : <code>npm install --save-dev webpack</code></li><li>安装webpack构建本地服务器 :<code>npm install --save-dev webpack-dev-server</code></li><li>安装babel : <code>npm install --save-dev babel-loader babel-core</code></li><li>安装样式加载模块：<code>npm install --save-dev style-loader css-loader</code></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 前段 </tag>
            
            <tag> webpack </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 框架搭建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>html-webpack-plugin</title>
      <link href="/2016/10/25/2016-10-25-1/"/>
      <url>/2016/10/25/2016-10-25-1/</url>
      <content type="html"><![CDATA[<p> webpack 插件： html-webpack-plugin</p><blockquote><p>这个插件用来简化创建服务于 webpack bundle 的 HTML 文件，尤其是对于在文件名中包含了 hash 值，而这个值在每次编译的时候都发生变化的情况。你既可以让这个插件来帮助你自动生成 HTML 文件，也可以使用 lodash 模板加载生成的 bundles，或者自己加载这些 bundles。</p></blockquote> <a id="more"></a><p> 插件地址：<a href="https://www.npmjs.com/package/html-webpack-plugin" target="_blank" rel="noopener">https://www.npmjs.com/package/html-webpack-plugin</a></p><ul><li>使用 npm 安装这个插件: <code>$ npm install html-webpack-plugin@2 --save-dev</code></li><li><p>webpack 配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">var</span> webpackConfig = &#123;</span><br><span class="line">  entry: <span class="string">'index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: <span class="string">'dist'</span>,</span><br><span class="line">    filename: <span class="string">'index_bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="keyword">new</span> HtmlWebpackPlugin()]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这将会自动在 dist 目录中生成一个名为 index.html 的文件，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index_bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>如果你有多个 webpack 入口点，它们都会被包含在生成的 script 元素中。</p><p>如果有任何的 CSS 资源包含在 webpack 输出中（例如，使用 ExtractTextPlugin 提炼出的 css ），这些将会使用 link 包含在 HTML 页面的 head 元素中。</p><h4 id="详细配置"><a href="#详细配置" class="headerlink" title="详细配置"></a>详细配置</h4><ul><li>title: 用来生成页面的 title 元素</li><li>filename: 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。</li><li>template: 模板文件路径，支持加载器，比如 html!./index.html</li><li>inject: true | ‘head’ | ‘body’ | false  ,注入所有的资源到特定的 template 或者 templateContent 中，如果设置为 true 或者 body，所有的 javascript 资源将被放置到 body 元素的底部，’head’ 将放置到 head 元素中。</li><li>favicon: 添加特定的 favicon 路径到输出的 HTML 文件中。</li><li>minify: {} | false , 传递 html-minifier 选项给 minify 输出</li><li>hash: true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS 文件，对于解除 cache 很有用。</li><li>cache: true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。</li><li>showErrors: true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中</li><li>chunks: 允许只添加某些块 (比如，仅仅 unit test 块)</li><li>chunksSortMode: 允许控制块在添加到页面之前的排序方式，支持的值：’none’ | ‘default’ | {function}-default:’auto’</li><li>excludeChunks: 允许跳过某些块，(比如，跳过单元测试的块)</li></ul><blockquote><p>下面的示例演示了如何使用这些配置。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">entry</span>: <span class="string">'index.js'</span>,</span><br><span class="line">  <span class="attribute">output</span>: &#123;</span><br><span class="line">    <span class="attribute">path</span>: <span class="string">'dist'</span>,</span><br><span class="line">    <span class="attribute">filename</span>: <span class="string">'index_bundle.js'</span>,</span><br><span class="line">    <span class="attribute">hash</span>: true</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attribute">plugins</span>: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attribute">title</span>: <span class="string">'My App'</span>,</span><br><span class="line">      <span class="attribute">filename</span>: <span class="string">'assets/admin.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="生成多个-HTML-文件"><a href="#生成多个-HTML-文件" class="headerlink" title="生成多个 HTML 文件"></a>生成多个 HTML 文件</h4><p>通过在配置文件中添加多次这个插件，来生成多个 HTML 文件。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">entry</span>: <span class="string">'index.js'</span>,</span><br><span class="line">  <span class="attribute">output</span>: &#123;</span><br><span class="line">    <span class="attribute">path</span>: <span class="string">'dist'</span>,</span><br><span class="line">    <span class="attribute">filename</span>: <span class="string">'index_bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attribute">plugins</span>: [</span><br><span class="line">    new HtmlWebpackPlugin(), <span class="comment">// Generates default index.html</span></span><br><span class="line">    new HtmlWebpackPlugin(&#123;  <span class="comment">// Also generate a test.html</span></span><br><span class="line">      <span class="attribute">filename</span>: <span class="string">'test.html'</span>,</span><br><span class="line">      <span class="attribute">template</span>: <span class="string">'src/assets/test.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="编写自定义模板"><a href="#编写自定义模板" class="headerlink" title="编写自定义模板"></a>编写自定义模板</h4><p>如果默认生成的 HTML 文件不适合你的需要看，可以创建自己定义的模板。方便的方式是通过 inject 选项，然后传递给定制的 HTML 文件。html-webpack-plugin 将会自动注入所有需要的 CSS, js, manifest 和 favicon 文件到标记中。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">plugins</span>: [</span><br><span class="line">  new HtmlWebpackPlugin(&#123;</span><br><span class="line">    <span class="attribute">title</span>: <span class="string">'Custom template'</span>,</span><br><span class="line">    <span class="attribute">template</span>: <span class="string">'my-index.html'</span>, <span class="comment">// Load a custom template</span></span><br><span class="line">    <span class="attribute">inject</span>: <span class="string">'body'</span> <span class="comment">// Inject all scripts into the body</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>my-index.html 文件<br><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> htmlWebpackPlugin.options.title </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>如果你有模板加载器，可以使用它来解析这个模板。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">module:</span> &#123;</span><br><span class="line"><span class="symbol">  loaders:</span> [</span><br><span class="line">    &#123; <span class="string">test:</span> <span class="regexp">/\.hbs$/</span>, <span class="string">loader:</span> <span class="string">"handlebars"</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">plugins:</span> [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line"><span class="symbol">    title:</span> <span class="string">'Custom template using Handlebars'</span>,</span><br><span class="line"><span class="symbol">    template:</span> <span class="string">'my-index.hbs'</span>,</span><br><span class="line"><span class="symbol">    inject:</span> <span class="string">'body'</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>另外，如果你的模式是一个字符串，可以使用 templateContent 传递它。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins:</span> <span class="string">[</span></span><br><span class="line">  <span class="string">new</span> <span class="string">HtmlWebpackPlugin(&#123;</span></span><br><span class="line"><span class="attr">    inject:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">    templateContent:</span> <span class="string">templateContentString</span></span><br><span class="line">  <span class="string">&#125;)</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure></p><p>如果 inject 特性不适合你的需要，你希望完全控制资源放置。 可以直接使用 lodash 语法，使用  default template 作为起点创建自己的模板。</p><p>templateContent 选项也可以是一个函数，以便使用其它语言，比如 jade：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    templateContent: <span class="function"><span class="keyword">function</span><span class="params">(templateParams, compilation)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Return your template content synchronously here</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'..'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>或者异步版本<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    templateContent: <span class="function"><span class="keyword">function</span><span class="params">(templateParams, compilation, callback)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Return your template content asynchronously here</span></span><br><span class="line">      callback(<span class="literal">null</span>, <span class="string">'..'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><blockquote><p>注意，如果同时使用 template 和 templateContent ，插件会抛出错误。</p></blockquote><ul><li>htmlWebpackPlugin: 这个插件的相关数据</li><li>htmlWebpackPlugin.files: 资源的块名，来自 webpack 的 stats 对象，包含来自 entry 的从 entry point name 到 bundle 文件名映射。<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"htmlWebpackPlugin"</span>: &#123;</span><br><span class="line">  <span class="string">"files"</span>: &#123;</span><br><span class="line">    <span class="string">"css"</span>: [ <span class="string">"main.css"</span> ],</span><br><span class="line">    <span class="string">"js"</span>: [ <span class="string">"assets/head_bundle.js"</span>, <span class="string">"assets/main_bundle.js"</span>],</span><br><span class="line">    <span class="string">"chunks"</span>: &#123;</span><br><span class="line">      <span class="string">"head"</span>: &#123;</span><br><span class="line">        <span class="string">"entry"</span>: <span class="string">"assets/head_bundle.js"</span>,</span><br><span class="line">        <span class="string">"css"</span>: [ <span class="string">"main.css"</span> ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"main"</span>: &#123;</span><br><span class="line">        <span class="string">"entry"</span>: <span class="string">"assets/main_bundle.js"</span>,</span><br><span class="line">        <span class="string">"css"</span>: []</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>如果在 webpack 配置文件中，你配置了 publicPath，将会反射正确的资源</p><ul><li>htmlWebpackPlugin.options: 传递给插件的配置。</li><li>webpack: webpack 的 stats 对象。</li><li>webpackConfig: webpack 配置信息。</li></ul><h4 id="过滤块"><a href="#过滤块" class="headerlink" title="过滤块"></a>过滤块</h4><p>可以使用 chunks 来限定特定的块。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugin<span class="variable">s:</span> [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    chunk<span class="variable">s:</span> [<span class="string">'app'</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>还可以使用 excludeChunks 来排除特定块。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugin<span class="variable">s:</span> [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    excludeChunk<span class="variable">s:</span> [<span class="string">'dev-helper'</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>通过事件允许其它插件来扩展 HTML。</p><ul><li>html-webpack-plugin-before-html-processing</li><li>html-webpack-plugin-after-html-processing</li><li>html-webpack-plugin-after-emit<br>使用方式：<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compilation.plugin(<span class="string">'html-webpack-plugin-before-html-processing'</span>, <span class="function"><span class="keyword">function</span><span class="params">(htmlPluginData, callback)</span> </span>&#123;</span><br><span class="line">  htmlPluginData.html += <span class="string">'The magic footer'</span>;</span><br><span class="line">  callback();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="完整的插件代码如下所示。"><a href="#完整的插件代码如下所示。" class="headerlink" title="完整的插件代码如下所示。"></a>完整的插件代码如下所示。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPlugin</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.options = options;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPlugin.prototype.apply = <span class="function"><span class="keyword">function</span>(<span class="params">compiler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> paths = <span class="keyword">this</span>.options.paths;</span><br><span class="line">    compiler.plugin(<span class="string">'compilation'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">compilation, options</span>) </span>&#123;</span><br><span class="line">        compilation.plugin(<span class="string">'html-webpack-plugin-before-html-processing'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">htmlPluginData, callback</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = paths.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                htmlPluginData.assets.js.unshift(paths[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            callback(<span class="literal">null</span>, htmlPluginData);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = MyPlugin;</span><br></pre></td></tr></table></figure><p>最后一行是导出我们的插件。</p>]]></content>
      
      
        <tags>
            
            <tag> 前段 </tag>
            
            <tag> webpack </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 框架搭建 </tag>
            
            <tag> html-webpack-plugin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前段框架搭建汇总-①</title>
      <link href="/2016/10/21/2016-10-21-1/"/>
      <url>/2016/10/21/2016-10-21-1/</url>
      <content type="html"><![CDATA[<blockquote><p>框架搭建过程！</p></blockquote><a id="more"></a><ul><li><p>安装Webpack <br>Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为ProjectName），在终端中转到该文件夹后执行下述指令就可以完成安装。</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局安装</span></span><br><span class="line">npm install -g webpack</span><br><span class="line"><span class="comment">//安装到你的项目目录</span></span><br><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> webpack</span><br></pre></td></tr></table></figure></li><li><p>初始化项目<br><br>在上述练习文件夹中创建一个<code>package.json</code>文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用<code>npm init</code>命令可以自动创建这个<code>package.json</code>文件</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mkdir</span> ProjectName</span><br><span class="line"><span class="keyword">cd</span> ProjectName</span><br><span class="line">npm init <span class="comment">//自动创建这个package.json</span></span><br></pre></td></tr></table></figure></li></ul><p>输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在<code>npm</code>中发布你的模块，这些问题的答案都不重要，回车默认即可。</p><ul><li><p><code>package.json</code>文件已经就绪，我们在本项目中安装<code>Webpack</code>作为依赖包</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装Webpack</span></span><br><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> webpack</span><br></pre></td></tr></table></figure></li><li><p>创建项目文件夹及其入口文件<br><br>回到之前的空文件夹，并在里面创建两个文件夹,<code>app</code>文件夹和<code>public</code>文件夹， <abbr title=""><code>app</code>文件夹用来存放原始数据和我们将写的JavaScript模块</abbr>，<abbr title=""><code>public</code>文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）</abbr>。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中，此时项目结构如下图所示</p><figure class="highlight irpf90"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir app  <span class="keyword">public</span></span><br><span class="line">cd app</span><br><span class="line"><span class="keyword">touch</span>  main.js  Greeter.js</span><br><span class="line">cd ../<span class="keyword">public</span></span><br><span class="line"><span class="keyword">touch</span> <span class="built_in">index</span>.html</span><br></pre></td></tr></table></figure></li></ul><p>此时项目结构如下图所示<br><img src="/img/2016-10-21.png" alt=""></p><blockquote><p><code>index.html</code>文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（<code>bundle.js</code>）<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Sample Project<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'root'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>Greeter.js</code>只包括一个用来返回包含问候信息的<code>html</code>元素的函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Greeter.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> greet = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  greet.textContent = <span class="string">"Hi there and greetings!"</span>;</span><br><span class="line">  <span class="keyword">return</span> greet;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>main.js</code>用来把<code>Greeter</code>模块返回的节点插入页面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">var</span> greeter = <span class="built_in">require</span>(<span class="string">'./Greeter.js'</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'root'</span>).appendChild(greeter());</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="正式使用Webpack"><a href="#正式使用Webpack" class="headerlink" title="正式使用Webpack"></a>正式使用Webpack</h5><p>webpack可以在终端中使用，其最基础的命令是<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack &#123;entry <span class="built_in">file</span>/入口文件&#125; &#123;destination <span class="keyword">for</span> bundled <span class="built_in">file</span>/存放bundle.js的地方&#125;</span><br></pre></td></tr></table></figure></p><p>只需要指定一个入口文件，webpack将自动识别项目所依赖的其它文件，<br>不过需要注意的是 <abbr title="">如果你的webpack没有进行全局安装，那么当你在终端中使用此命令时，需要额外指定其在<code>node_modules</code>中的地址</abbr>.</p><ul><li>继续上面的例子，在终端中属于如下命令:<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>webpack非全局安装的情况</span><br><span class="line">node_modules<span class="regexp">/.bin/</span>webpack   app<span class="regexp">/main.js   public/</span>bundle.js</span><br></pre></td></tr></table></figure></li></ul><p>结果如下<br><img src="/img/2016-10-21-1.png" alt=""><br>可以看出<code>webpack</code>同时编译了<code>main.js</code>和<code>Greeter.js</code>,<br>现在打开<code>index.html</code>,可以看到如下结果<br><img src="/img/2016-10-21-2.png" alt=""><br>有没有很激动，已经成功的使用Webpack打包了一个文件了。不过如果在终端中进行复杂的操作，还是不太方便且容易出错的，接下来看看Webpack的另一种使用方法。</p><h5 id="通过配置文件来使用Webpack"><a href="#通过配置文件来使用Webpack" class="headerlink" title="通过配置文件来使用Webpack"></a>通过配置文件来使用Webpack</h5><p>Webpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。</p><p>还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为<code>webpack.config.js</code>的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"><span class="symbol">  entry:</span>  __dirname + <span class="string">"/app/main.js"</span>,<span class="comment">//已多次提及的唯一入口文件</span></span><br><span class="line"><span class="symbol">  output:</span> &#123;</span><br><span class="line"><span class="symbol">    path:</span> __dirname + <span class="string">"/public"</span>,<span class="comment">//打包后的文件存放的地方</span></span><br><span class="line"><span class="symbol">    filename:</span> <span class="string">"bundle.js"</span><span class="comment">//打包后输出文件的文件名</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>注：<code>__dirname</code> 是node.js中的一个全局变量，它指向<abbr title="">当前执行脚本所在的目录<abbr>。</abbr></abbr></p></blockquote><p>现在如果你需要打包文件只需要在终端里你运行<code>webpack</code>(非全局安装需使用<code>node_modules/.bin/webpack</code>)命令就可以了，这条命令会自动参考<code>webpack.config.js</code>文件中的配置选项打包你的项目。</p><p>又学会了一种使用Webpack的方法，而且不用管那烦人的命令行参数了，有没有感觉很爽。有没有想过如果可以连webpack(非全局安装需使用<code>node_modules/.bin/webpack</code>)这条命令都可以不用，那种感觉会不会更爽~，继续看下文。</p><h5 id="更快捷的执行打包任务"><a href="#更快捷的执行打包任务" class="headerlink" title="更快捷的执行打包任务"></a>更快捷的执行打包任务</h5><p>执行类似于<code>node_modules/.bin/webpack</code>这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是npm可以引导任务执行，对其进行配置后可以使用简单的<code>npm start</code>命令来代替这些繁琐的命令。<br>在package.json中对npm的脚本部分进行相关设置即可，设置方法如下。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"webpack-sample-project"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Sample webpack project"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"webpack"</span>  //配置的地方就是这里啦，相当于把npm的start命令指向webpack命令</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"zhang"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^1.12.9"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>注：package.json中的脚本部分已经默认在命令前添加了<code>node_modules/.bin</code>路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。</p></blockquote><p>npm的<code>start</code>是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用<code>npm start</code>就可以执行相关命令，如果对应的此脚本名称不是start，想要在命令行中运行时，需要这样用<code>npm run {script name}</code>如<code>npm run build</code>，以下是执行<code>npm start</code>后命令行的输出显示<br><img src="/img/2016-10-21-3.png" alt=""><br>现在只需要使用<code>npm start</code>就可以打包文件了，有没有觉得webpack也不过如此嘛，不过不要太小瞧Webpack，其强大的功能包含在其一系列可供配置的选项中，我们一项项来看。</p><h5 id="Webpack的强大功能"><a href="#Webpack的强大功能" class="headerlink" title="Webpack的强大功能"></a>Webpack的强大功能</h5><h6 id="生成Source-Maps（使调试更容易）"><a href="#生成Source-Maps（使调试更容易）" class="headerlink" title="生成Source Maps（使调试更容易）"></a>生成Source Maps（使调试更容易）</h6><p>开发总是离不开调试，如果可以更加方便的调试当然就能提高开发效率，不过打包后的文件有时候你是不容易找到出错了的地方对应的源代码的位置的，Source Maps就是来帮我们解决这个问题的。<br><br>通过简单的配置后，Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。<br><br>在webpack的配置文件中配置source maps，需要配置devtool，它有以下四种不同的配置选项，各具优缺点，描述如下：</p><table><thead><tr><th>devtool选项</th><th>配置结果</th></tr></thead><tbody><tr><td>source-map</td><td>在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度；</td></tr><tr><td>cheap-module-source-map</td><td>在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；</td></tr><tr><td>eval-source-map</td><td>使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项；</td></tr><tr><td>cheap-module-eval-source-map</td><td>这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和<code>eval-source-map</code>选项具有相似的缺点；</td></tr></tbody></table><p>正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的构建速度的后果就是对打包后的文件的的执行有一定影响。<br>在学习阶段以及在小到中性的项目上，<code>eval-source-map</code>是一个很好的选项，不过记得只在开发阶段使用它，继续上面的例子，进行如下配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line">  devtool: <span class="string">'eval-source-map'</span>,<span class="comment">//配置生成Source Maps，选择合适的选项</span></span><br><span class="line">  entry:  __dirname + <span class="string">"/app/main.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">"/public"</span>,</span><br><span class="line">    filename: <span class="string">"bundle.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><code>cheap-module-eval-source-map</code>方法构建速度更快，但是不利于调试，推荐在大型项目考虑da时间成本是使用。</p></blockquote><h5 id="使用webpack构建本地服务器"><a href="#使用webpack构建本地服务器" class="headerlink" title="使用webpack构建本地服务器"></a>使用webpack构建本地服务器</h5><p>想不想让你的浏览器监测你都代码的修改，并自动刷新修改后的结果，其实Webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> webpack-<span class="built_in">dev</span>-server</span><br></pre></td></tr></table></figure></p><ul><li>devserver作为webpack配置选项中的一项，具有以下配置选项</li></ul><table><thead><tr><th>devserver配置选项</th><th>功能描述</th></tr></thead><tbody><tr><td>contentBase</td><td>默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public”目录）</td></tr><tr><td>port</td><td>设置默认监听端口，如果省略，默认为<code>8080</code></td></tr><tr><td>inline</td><td>设置为<code>true</code>，当源文件改变时会自动刷新页面</td></tr><tr><td>colors</td><td>设置为<code>true</code>，使终端输出的文件为彩色的</td></tr><tr><td>historyApiFallback</td><td>在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html</td></tr></tbody></table><ul><li>继续把这些命令加到webpack的配置文件中，现在的配置文件如下所示<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">module.exports</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">  devtool:</span> <span class="string">'eval-source-map'</span><span class="string">,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  entry:</span>  <span class="string">__dirname</span> <span class="string">+</span> <span class="string">"/app/main.js"</span><span class="string">,</span></span><br><span class="line"><span class="attr">  output:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">__dirname</span> <span class="string">+</span> <span class="string">"/public"</span><span class="string">,</span></span><br><span class="line"><span class="attr">    filename:</span> <span class="string">"bundle.js"</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  devServer:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    contentBase:</span> <span class="string">"./public"</span><span class="string">,//本地服务器所加载的页面所在的目录</span></span><br><span class="line"><span class="attr">    colors:</span> <span class="literal">true</span><span class="string">,//终端中输出结果为彩色</span></span><br><span class="line"><span class="attr">    historyApiFallback:</span> <span class="literal">true</span><span class="string">,//不跳转</span></span><br><span class="line"><span class="attr">    inline:</span> <span class="literal">true</span><span class="string">//实时刷新</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h5><h6 id="鼎鼎大名的Loaders登场了！"><a href="#鼎鼎大名的Loaders登场了！" class="headerlink" title="鼎鼎大名的Loaders登场了！"></a>鼎鼎大名的Loaders登场了！</h6><p>Loaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。</p><p>Loaders需要单独安装并且需要在<code>webpack.config.js</code>下的modules关键字下进行配置，Loaders的配置选项包括以下几方面：</p><ul><li>test：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）</li><li>loader：loader的名称（必须）</li><li>include/exclude:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li><li>query：为loaders提供额外的设置选项（可选）</li></ul><blockquote><p>继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装可以装换JSON的loader</span></span><br><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> json-loader</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">module.exports</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">  devtool:</span> <span class="string">'eval-source-map'</span><span class="string">,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  entry:</span>  <span class="string">__dirname</span> <span class="string">+</span> <span class="string">"/app/main.js"</span><span class="string">,</span></span><br><span class="line"><span class="attr">  output:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">__dirname</span> <span class="string">+</span> <span class="string">"/public"</span><span class="string">,</span></span><br><span class="line"><span class="attr">    filename:</span> <span class="string">"bundle.js"</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  module:</span> <span class="string">&#123;//在配置文件里添加JSON</span> <span class="string">loader</span></span><br><span class="line"><span class="attr">    loaders:</span> <span class="string">[</span></span><br><span class="line">      <span class="string">&#123;</span></span><br><span class="line"><span class="attr">        test:</span> <span class="string">/\.json$/,</span></span><br><span class="line"><span class="attr">        loader:</span> <span class="string">"json"</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">    <span class="string">]</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  devServer:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    contentBase:</span> <span class="string">"./public"</span><span class="string">,</span></span><br><span class="line"><span class="attr">    colors:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">    historyApiFallback:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">    inline:</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>创建带有问候信息的JSON文件(命名为config.json)<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//config.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"greetText"</span>: <span class="string">"Hi there and greetings from JSON!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>更新后的Greeter.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./config.json'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> greet = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  greet.textContent = config.greetText;</span><br><span class="line">  <span class="keyword">return</span> greet;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Loaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。</p></blockquote><h5 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h5><p>Babel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：<br><em>下一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持；</em>使用基于JavaScript进行了拓展的语言，比如React的JSX</p><h5 id="Babel的安装与配置"><a href="#Babel的安装与配置" class="headerlink" title="Babel的安装与配置"></a>Babel的安装与配置</h5><p>Babel其实是几个模块化的包，其核心功能位于称为babel-core的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。</p><blockquote><p>我们先来一次性安装这些依赖包<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// npm一次性安装多个依赖模块，模块之间用空格隔开</span><br><span class="line"><span class="symbol">npm</span> install --save-dev <span class="keyword">babel-core </span><span class="keyword">babel-loader </span><span class="keyword">babel-preset-es2015 </span><span class="keyword">babel-preset-react</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在webpack中配置Babel的方法如下<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">module.exports</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">  devtool:</span> <span class="string">'eval-source-map'</span><span class="string">,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  entry:</span>  <span class="string">__dirname</span> <span class="string">+</span> <span class="string">"/app/main.js"</span><span class="string">,</span></span><br><span class="line"><span class="attr">  output:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">__dirname</span> <span class="string">+</span> <span class="string">"/public"</span><span class="string">,</span></span><br><span class="line"><span class="attr">    filename:</span> <span class="string">"bundle.js"</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  module:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    loaders:</span> <span class="string">[</span></span><br><span class="line">      <span class="string">&#123;</span></span><br><span class="line"><span class="attr">        test:</span> <span class="string">/\.json$/,</span></span><br><span class="line"><span class="attr">        loader:</span> <span class="string">"json"</span></span><br><span class="line">      <span class="string">&#125;,</span></span><br><span class="line">      <span class="string">&#123;</span></span><br><span class="line"><span class="attr">        test:</span> <span class="string">/\.js$/,</span></span><br><span class="line"><span class="attr">        exclude:</span> <span class="string">/node_modules/,</span></span><br><span class="line"><span class="attr">        loader:</span> <span class="string">'babel'</span><span class="string">,//在webpack的module部分的loaders里进行配置即可</span></span><br><span class="line"><span class="attr">        query:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">          presets:</span> <span class="string">['es2015','react']</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">    <span class="string">]</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  devServer:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    contentBase:</span> <span class="string">"./public"</span><span class="string">,</span></span><br><span class="line"><span class="attr">    colors:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">    historyApiFallback:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">    inline:</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save react react-dom</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用<code>ES6</code>的语法，更新Greeter.js并返回一个<code>React</code>组件<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Greeter,js</span></span><br><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123;<span class="type">Component</span>&#125; from <span class="symbol">'reac</span>t'</span><br><span class="line"><span class="keyword">import</span> config from './config.json';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;config.greetText&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> <span class="type">Greeter</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用ES6的模块定义和渲染Greeter模块<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Greeter <span class="keyword">from</span> <span class="string">'./Greeter'</span>;</span><br><span class="line"></span><br><span class="line">render(&lt;Greeter /&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="Babel的配置选项"><a href="#Babel的配置选项" class="headerlink" title="Babel的配置选项"></a>Babel的配置选项</h5><p>Babel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用.babelrc里的babel配置选项），如下：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// webpack.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  devtool: 'eval-source-map',</span><br><span class="line"></span><br><span class="line">  entry:  __dirname + <span class="string">"/app/main.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">"/public"</span>,</span><br><span class="line">    filename: <span class="string">"bundle.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  module: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.json$/,</span><br><span class="line">        loader: <span class="string">"json"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /node_modules/,</span><br><span class="line">        loader: 'babel'</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  devServer: <span class="meta">&#123;...&#125;</span> // <span class="type">Omitted</span> <span class="keyword">for</span> brevity</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"react"</span>, <span class="string">"es2015"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。</p><h5 id="一切皆模块"><a href="#一切皆模块" class="headerlink" title="一切皆模块"></a>一切皆模块</h5><p>Webpack有一个不可不说的优点，它把所有的文件都可以当做模块处理，包括你的JavaScript代码，也包括CSS和fonts以及图片等等等，只有通过合适的loaders，它们都可以被当做模块被处理。</p><h5 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h5><p>webpack提供两个工具处理样式表，<code>css-loader</code> 和<code>style-loader</code>，二者处理的任务不同，<code>css-loader</code>使你能够使用类似<code>@import</code>和<code>url(...)</code>的方法实现<code>require()</code>的功能,<code>style-loader</code>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入<code>webpack</code>打包后的JS文件中。</p><blockquote><p>继续上面的例子<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装</span></span><br><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> style-loader css-loader</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'eval-source-map'</span>,</span><br><span class="line"></span><br><span class="line">  entry:  __dirname + <span class="string">"/app/main.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">"/build"</span>,</span><br><span class="line">    filename: <span class="string">"bundle.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.json$/</span>,</span><br><span class="line">        loader: <span class="string">"json"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        loader: <span class="string">'style!css'</span><span class="comment">//添加对样式表的处理</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  devServer: &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：感叹号的作用在于使同一文件能够使用不同类型的loader<br>接下来，在app文件夹里创建一个名字为”main.css”的文件，对一些元素设置样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">-ms-text-size-adjust</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">-webkit-text-size-adjust</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Helvetica Neue'</span>, Helvetica, Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Greeter <span class="keyword">from</span> <span class="string">'./Greeter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./main.css'</span>;<span class="comment">//使用require导入css文件</span></span><br><span class="line"></span><br><span class="line">render(&lt;Greeter /&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><blockquote><p>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。<br>不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。</p></blockquote><h5 id="CSS-module"><a href="#CSS-module" class="headerlink" title="CSS module"></a>CSS module</h5><p>在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，且基于优化工具，依赖管理和加载管理可以自动完成。<br>不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧是巨大且充满了全局类名，这使得维护和修改都非常困难和复杂。</p><p>最近有一个叫做 CSS modules 的技术就意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack从一开始就对CSS模块化提供了支持，在CSS loader中进行配置后，你所需要做的一切就是把”modules“传递都所需要的地方，然后就可以直接把CSS的类名传递到组件的代码中，且这样做只对当前组件有效，不必担心在不同的模块中具有相同的类名可能会造成的问题。具体的代码如下</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  devtool: 'eval-source-map',</span><br><span class="line"></span><br><span class="line">  entry:  __dirname + <span class="string">"/app/main.js"</span>,</span><br><span class="line">  output: <span class="meta">&#123;...&#125;</span>,</span><br><span class="line"></span><br><span class="line">  module: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.json$/,</span><br><span class="line">        loader: <span class="string">"json"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /node_modules/,</span><br><span class="line">        loader: 'babel'</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        loader: 'style!css?modules'//跟前面相比就在后面加上了?modules</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  devServer: <span class="meta">&#123;...&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建一个Greeter.css文件</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.root</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>导入.root到Greeter.js中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config.json'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./Greeter.css'</span>;<span class="comment">//导入</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=&#123;styles.root&#125;&gt;<span class="comment">//添加类名</span></span><br><span class="line">        &#123;config.greetText&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Greeter</span></span><br></pre></td></tr></table></figure><blockquote><p>放心使用把，相同的类名也不会造成不同组件之间的污染。<br>CSS modules 也是一个很大的主题，有兴趣的话可以去官方文档查看更多消息</p></blockquote><h5 id="CSS预处理器"><a href="#CSS预处理器" class="headerlink" title="CSS预处理器"></a>CSS预处理器</h5><p>Sass 和 Less之类的预处理器是对原生CSS的拓展，它们允许你使用类似于variables, nesting, mixins, inheritance等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，<br>你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理loaders</p><ul><li>Less Loader</li><li>Sass Loader</li><li>Stylus Loader</li></ul><p>不过其实也存在一个CSS的处理平台-PostCSS，它可以帮助你的CSS实现更多的功能，在其CSS官方文档可了解更多相关知识。<br>举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。</p><blockquote><p>首先安装postcss-loader 和 autoprefixer（自动添加前缀的插件）<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> postcss-loader autoprefixer</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>接下来，在webpack配置文件中进行设置，只需要新建一个postcss关键字，并在里面申明依赖的插件，如下，现在你写的css会自动根据Can i use里的数据添加不同前缀了。<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//webpack配置文件</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  devtool: 'eval-source-map',</span><br><span class="line">  entry: __dirname + <span class="string">"/app/main.js"</span>,</span><br><span class="line">  output: <span class="meta">&#123;...&#125;</span>,</span><br><span class="line"></span><br><span class="line">  module: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.json$/,</span><br><span class="line">        loader: <span class="string">"json"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /node_modules/,</span><br><span class="line">        loader: 'babel'</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        loader: 'style!css?modules!postcss'</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  postcss: [</span><br><span class="line">    require('autoprefixer')//调用autoprefixer插件</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  devServer: <span class="meta">&#123;...&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>到现在，本文已经涉及到处理JS的Babel和处理CSS的PostCSS，它们其实也是两个单独的平台，配合Webpack可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-Plugins</p><h5 id="插件（Plugins）"><a href="#插件（Plugins）" class="headerlink" title="插件（Plugins）"></a>插件（Plugins）</h5><p>插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。<br>Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p><p>Webpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。</p><h5 id="使用插件的方法"><a href="#使用插件的方法" class="headerlink" title="使用插件的方法"></a>使用插件的方法</h5><p>要使用某个插件，我们需要通过npm安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续看例子，我们添加了一个实现版权声明的插件。</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//webpack.config.js</span><br><span class="line"><span class="keyword">var</span> webpack = require('webpack');</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  devtool: 'eval-source-map',</span><br><span class="line">  entry:  __dirname + <span class="string">"/app/main.js"</span>,</span><br><span class="line">  output: <span class="meta">&#123;...&#125;</span>,</span><br><span class="line"></span><br><span class="line">  module: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123; test: /\.json$/, loader: <span class="string">"json"</span> &#125;,</span><br><span class="line">      &#123; test: /\.js$/, exclude: /node_modules/, loader: 'babel' &#125;,</span><br><span class="line">      &#123; test: /\.css$/, loader: 'style!css?modules!postcss' &#125;//这里添加<span class="type">PostCSS</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  postcss: [</span><br><span class="line">    require('autoprefixer')</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.<span class="type">BannerPlugin</span>(<span class="string">"Copyright Flying Unicorns inc."</span>)//在这个数组中new一个就可以了</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  devServer: <span class="meta">&#123;...&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>打包后的JS文件<code>bundle.js</code>将会添加版本信息。<br>知道Webpack中的插件如何使用了，下面给大家推荐几个常用的插件</p></blockquote><h5 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h5><p>这个插件的作用是依据一个简单的模板，帮你生成最终的Html5文件，这个文件中自动引用了你打包后的JS文件。每次编译都在文件名中插入一个不同的哈希值。</p><ul><li>安装<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> html-webpack-plugin</span><br></pre></td></tr></table></figure></li></ul><p>这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些改变：</p><ol><li>移除public文件夹，利用此插件，HTML5文件会自动生成，此外CSS已经通过前面的操作打包到JS中了，public文件夹里。</li><li><p>在app目录下，创建一个Html文件模板，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，在本例中我们命名模板文件名称为index.tmpl.html，模板源代码<br>如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Sample Project<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'root'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>更新webpack的配置文件，方法同上,新建一个build文件夹用来存放最终的输出文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'eval-source-map'</span>,</span><br><span class="line"></span><br><span class="line">  entry:  __dirname + <span class="string">"/app/main.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">"/build"</span>,</span><br><span class="line">    filename: <span class="string">"bundle.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123; test: <span class="regexp">/\.json$/</span>, loader: <span class="string">"json"</span> &#125;,</span><br><span class="line">      &#123; test: <span class="regexp">/\.js$/</span>, exclude: <span class="regexp">/node_modules/</span>, loader: <span class="string">'babel'</span> &#125;,</span><br><span class="line">      &#123; test: <span class="regexp">/\.css$/</span>, loader: <span class="string">'style!css?modules!postcss'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  postcss: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: __dirname + <span class="string">"/app/index.tmpl.html"</span><span class="comment">//new 一个这个插件的实例，并传入相关的参数</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    colors: <span class="literal">true</span>,</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    inline: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="Hot-Module-Replacement"><a href="#Hot-Module-Replacement" class="headerlink" title="Hot Module Replacement"></a>Hot Module Replacement</h5><p>Hot Module Replacement（HMR）也是webpack里很有用的一个插件，它允许你在修改组件代码后，自动刷新实时预览修改后的效果。<br>在webpack中实现HMR也很简单，只需要做两项配置</p><ol><li>在webpack配置文件中添加HMR插件；</li><li>在Webpack Dev Server中添加“hot”参数；</li></ol><p>不过配置完这些后，JS模块其实还是不能自动热加载的，还需要在你的JS模块中执行一个Webpack提供的API才能实现热加载，虽然这个API不难使用，但是如果是React模块，使用我们已经熟悉的Babel可以更方便的实现功能热加载。</p><p>整理下我们的思路，具体实现方法如下</p><ul><li>Babel和webpack是独立的工具</li><li>二者可以一起工作</li><li>二者都可以通过插件拓展功能</li><li>HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，但是如果你想让它工作，需要对模块进行额外的配额；</li><li>Babel有一个叫做react-transform-hrm的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作；</li></ul><blockquote><p>更新我们的例子来实际看看如何配置<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack中的配置</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'eval-source-map'</span>,</span><br><span class="line">  entry: __dirname + <span class="string">"/app/main.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">"/build"</span>,</span><br><span class="line">    filename: <span class="string">"bundle.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123; test: <span class="regexp">/\.json$/</span>, loader: <span class="string">"json"</span> &#125;,</span><br><span class="line">      &#123; test: <span class="regexp">/\.js$/</span>, exclude: <span class="regexp">/node_modules/</span>, loader: <span class="string">'babel'</span> &#125;,</span><br><span class="line">      &#123; test: <span class="regexp">/\.css$/</span>, loader: <span class="string">'style!css?modules!postcss'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  postcss: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: __dirname + <span class="string">"/app/index.tmpl.html"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()<span class="comment">//热加载插件</span></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    colors: <span class="literal">true</span>,</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    inline: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>安装react-transform-hmr<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-dev babel-plugin-react-<span class="built_in">transform</span> react-<span class="built_in">transform</span>-hmr</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>配置Babel<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"react"</span>, <span class="string">"es2015"</span>],</span><br><span class="line">  <span class="attr">"env"</span>: &#123;</span><br><span class="line">    <span class="attr">"development"</span>: &#123;</span><br><span class="line">    <span class="attr">"plugins"</span>: [[<span class="string">"react-transform"</span>, &#123;</span><br><span class="line">       <span class="attr">"transforms"</span>: [&#123;</span><br><span class="line">         <span class="attr">"transform"</span>: <span class="string">"react-transform-hmr"</span>,</span><br><span class="line"></span><br><span class="line">         <span class="attr">"imports"</span>: [<span class="string">"react"</span>],</span><br><span class="line"></span><br><span class="line">         <span class="attr">"locals"</span>: [<span class="string">"module"</span>]</span><br><span class="line">       &#125;]</span><br><span class="line">     &#125;]]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>现在当你使用React时，可以热加载模块了</p></blockquote><h5 id="产品阶段的构建"><a href="#产品阶段的构建" class="headerlink" title="产品阶段的构建"></a>产品阶段的构建</h5><p>目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。</p><p>对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个“webpack.production.config.js”的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: __dirname + <span class="string">"/app/main.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">"/build"</span>,</span><br><span class="line">    filename: <span class="string">"bundle.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.json$/</span>,</span><br><span class="line">        loader: <span class="string">"json"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        loader: <span class="string">'style!css?modules!postcss'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  postcss: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: __dirname + <span class="string">"/app/index.tmpl.html"</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>package.json<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"webpack-sample-project"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"Sample webpack project"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"webpack-dev-server --progress"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"NODE_ENV=production webpack --config ./webpack.production.config.js --progress"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"Cássio Zen"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: <span class="meta">&#123;...&#125;</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: <span class="meta">&#123;...&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="优化插件"><a href="#优化插件" class="headerlink" title="优化插件"></a>优化插件</h5><p>webpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能</p><ul><li>OccurenceOrderPlugin :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</li><li>UglifyJsPlugin：压缩JS代码；</li><li>ExtractTextPlugin：分离CSS和JS文件</li></ul><blockquote><p>我们继续用例子来看看如何添加它们，OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装它们<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-dev extract-<span class="built_in">text</span>-webpack-plugin</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在配置文件的plugins后引用它们<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: __dirname + <span class="string">"/app/main.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">"/build"</span>,</span><br><span class="line">    filename: <span class="string">"bundle.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.json$/</span>,</span><br><span class="line">        loader: <span class="string">"json"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        loader: ExtractTextPlugin.extract(<span class="string">'style'</span>, <span class="string">'css?modules!postcss'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  postcss: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: __dirname + <span class="string">"/app/index.tmpl.html"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.OccurenceOrderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"style.css"</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h5><p>缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）</p><p>webpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: __dirname + <span class="string">"/app/main.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">"/build"</span>,</span><br><span class="line">    filename: <span class="string">"[name]-[hash].js"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.json$/</span>,</span><br><span class="line">        loader: <span class="string">"json"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        loader: ExtractTextPlugin.extract(<span class="string">'style'</span>, <span class="string">'css?modules!postcss'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  postcss: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: __dirname + <span class="string">"/app/index.tmpl.html"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.OccurenceOrderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"[name]-[hash].css"</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>现在用户会有合理的缓存了。</p></blockquote><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>这是一篇好长的文章，谢谢你的耐心，能仔细看到了这里，大概半个月前我第一次自己一步步配置项目所需的Webpack后就一直想写一篇笔记做总结，几次动笔都不能让自己满意，总觉得写不清楚。直到看到<a href="http://www.pro-react.com/materials/appendixA/#&quot;Heading link&quot;" target="_blank" rel="noopener">本文的英文版Webpack for React</a>，真的有多次豁然开朗的感觉，喜欢看原文的点链接就可以看了。其实关于Webpack本文讲述得仍不完全，不过相信你看完后已经进入Webpack的大门，能够更好的探索其它的关于Webpack的知识了。</p><p><hr><br>点击查看 <a href="http://www.pro-react.com/materials/appendixA/#&quot;Heading link&quot;" target="_blank" rel="noopener">本文的英文版Webpack for React</a><br>点击查看 <a href="http://www.jianshu.com/p/42e11515c10f#&quot;Heading link&quot;" target="_blank" rel="noopener">原本</a></p>]]></content>
      
      
        <tags>
            
            <tag> 前段 </tag>
            
            <tag> webpack </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 框架搭建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GIT同时配置两个SSH</title>
      <link href="/2016/10/21/2016-10-21/"/>
      <url>/2016/10/21/2016-10-21/</url>
      <content type="html"><![CDATA[<p>个人需要配置一个公司的GitLab以及一个Github两个SSH!</p><a id="more"></a><ul><li>先按照<a href="https://github.com/settings/keys" target="_blank" rel="noopener">GitLab </a> 官网配置github的SSH。</li><li><p>之后添加公司SSH.<br>执行一下命令：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">'myusername@mycompanyname.com'</span></span><br><span class="line"># 然后会让你输入文件名，可以输入 `id_rsa_mycompanyname`</span><br><span class="line"># 然后一路回车就行</span><br></pre></td></tr></table></figure></li><li><p>将生成的两个文件  <code>id_rsa_mycompanyname</code>  和 <code>id_rsa_mycompanyname.pub</code> 拷贝到目录 <code>\.ssh</code> 下。</p></li><li>在目录<code>.ssh</code> 下找到文件 <code>config</code> ，如果没有这个文件，则新建一个，切记，这个文件没有后缀名！</li><li>在 <code>config</code> 里加入如下内容：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认github  github user(myusername@mygithubMail.com)</span></span><br><span class="line">Host github</span><br><span class="line">    HostName github.com</span><br><span class="line">   <span class="built_in"> User </span>git</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公司gitLab 修改HostName  user(myusername@mycompanyname.com)</span></span><br><span class="line">Host git.myone.com</span><br><span class="line">    HostName git.myone.com</span><br><span class="line">   <span class="built_in"> User </span>git</span><br><span class="line">   <span class="built_in"> Port </span>22</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_mycompanyname</span><br></pre></td></tr></table></figure><ul><li>将这个生成的 <code>id_rsa_mycompanyname.pub</code> 的内容加入到 gitlab上的SSH上后，即可使用！<br>此时，github和gitlab 都可正常使用。如果有其他的网站，也可以按照这种方法继续处理。每一个 ssh的生成都要对应站点使用的email 。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> 前段 </tag>
            
            <tag> GIT </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客主题修改部署问题</title>
      <link href="/2016/10/12/2016-10-17/"/>
      <url>/2016/10/12/2016-10-17/</url>
      <content type="html"><![CDATA[<p>原博客主题修改完成后报错，及其决绝办法！<br><a id="more"></a></p><p>原博客主题修改完成后报以下错：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">upsmart@upsmart-<span class="symbol">pc:</span>~<span class="regexp">/myone$ hexo s</span></span><br><span class="line"><span class="regexp">INFO  Start processing</span></span><br><span class="line"><span class="regexp">FATAL Something's wrong. Maybe you can find the solution here: http:/</span><span class="regexp">/hexo.io/docs</span><span class="regexp">/troubleshooting.html</span></span><br><span class="line"><span class="regexp">Error: watch /home</span><span class="regexp">/upsmart/myone</span><span class="regexp">/themes/yilia</span><span class="regexp">/node_modules/sass</span>-loader/node_modules/lodash/pull.js ENOSPC</span><br><span class="line">    at exports._errnoException (util.<span class="symbol">js:</span><span class="number">896</span>:<span class="number">11</span>)</span><br><span class="line">    at FSWatcher.start (fs.<span class="symbol">js:</span><span class="number">1423</span>:<span class="number">19</span>)</span><br><span class="line">    at Object.fs.watch (fs.<span class="symbol">js:</span><span class="number">1450</span>:<span class="number">11</span>)</span><br><span class="line">    at createFsWatchInstance (<span class="regexp">/home/upsmart</span><span class="regexp">/myone/node</span>_modules/chokidar/<span class="class"><span class="keyword">lib</span>/<span class="title">nodefs</span>-<span class="title">handler</span>.<span class="title">js</span>:37:15)</span></span><br><span class="line">    at setFsWatchListener (<span class="regexp">/home/upsmart</span><span class="regexp">/myone/node</span>_modules/chokidar/<span class="class"><span class="keyword">lib</span>/<span class="title">nodefs</span>-<span class="title">handler</span>.<span class="title">js</span>:80:15)</span></span><br><span class="line">    at FSWatcher.NodeFsHandler._watchWithNodeFs (<span class="regexp">/home/upsmart</span><span class="regexp">/myone/node</span>_modules/chokidar/<span class="class"><span class="keyword">lib</span>/<span class="title">nodefs</span>-<span class="title">handler</span>.<span class="title">js</span>:228:14)</span></span><br><span class="line">    at FSWatcher.NodeFsHandler._handleFile (<span class="regexp">/home/upsmart</span><span class="regexp">/myone/node</span>_modules/chokidar/<span class="class"><span class="keyword">lib</span>/<span class="title">nodefs</span>-<span class="title">handler</span>.<span class="title">js</span>:255:21)</span></span><br><span class="line">    at FSWatcher.&lt;anonymous&gt; (<span class="regexp">/home/upsmart</span><span class="regexp">/myone/node</span>_modules/chokidar/<span class="class"><span class="keyword">lib</span>/<span class="title">nodefs</span>-<span class="title">handler</span>.<span class="title">js</span>:473:21)</span></span><br><span class="line">    at FSReqWrap.oncomplete (fs.<span class="symbol">js:</span><span class="number">117</span>:<span class="number">15</span>)</span><br><span class="line">FATAL watch /home/upsmart/myone/themes/yilia/node_modules/sass-loader/node_modules/lodash/pull.js ENOSPC</span><br><span class="line"><span class="symbol">Error:</span> watch /home/upsmart/myone/themes/yilia/node_modules/sass-loader/node_modules/lodash/pull.js ENOSPC</span><br><span class="line">    at exports._errnoException (util.<span class="symbol">js:</span><span class="number">896</span>:<span class="number">11</span>)</span><br><span class="line">    at FSWatcher.start (fs.<span class="symbol">js:</span><span class="number">1423</span>:<span class="number">19</span>)</span><br><span class="line">    at Object.fs.watch (fs.<span class="symbol">js:</span><span class="number">1450</span>:<span class="number">11</span>)</span><br><span class="line">    at createFsWatchInstance (<span class="regexp">/home/upsmart</span><span class="regexp">/myone/node</span>_modules/chokidar/<span class="class"><span class="keyword">lib</span>/<span class="title">nodefs</span>-<span class="title">handler</span>.<span class="title">js</span>:37:15)</span></span><br><span class="line">    at setFsWatchListener (<span class="regexp">/home/upsmart</span><span class="regexp">/myone/node</span>_modules/chokidar/<span class="class"><span class="keyword">lib</span>/<span class="title">nodefs</span>-<span class="title">handler</span>.<span class="title">js</span>:80:15)</span></span><br><span class="line">    at FSWatcher.NodeFsHandler._watchWithNodeFs (<span class="regexp">/home/upsmart</span><span class="regexp">/myone/node</span>_modules/chokidar/<span class="class"><span class="keyword">lib</span>/<span class="title">nodefs</span>-<span class="title">handler</span>.<span class="title">js</span>:228:14)</span></span><br><span class="line">    at FSWatcher.NodeFsHandler._handleFile (<span class="regexp">/home/upsmart</span><span class="regexp">/myone/node</span>_modules/chokidar/<span class="class"><span class="keyword">lib</span>/<span class="title">nodefs</span>-<span class="title">handler</span>.<span class="title">js</span>:255:21)</span></span><br><span class="line">    at FSWatcher.&lt;anonymous&gt; (<span class="regexp">/home/upsmart</span><span class="regexp">/myone/node</span>_modules/chokidar/<span class="class"><span class="keyword">lib</span>/<span class="title">nodefs</span>-<span class="title">handler</span>.<span class="title">js</span>:473:21)</span></span><br><span class="line">    at FSReqWrap.oncomplete (fs.<span class="symbol">js:</span><span class="number">117</span>:<span class="number">15</span>)</span><br></pre></td></tr></table></figure><p>看出是node_modules 里面的文件出错，但实际部署不需要，使用命令移除：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rimraf</span> node_modules</span><br></pre></td></tr></table></figure></p><p> 安装rimraf<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install <span class="keyword">node</span><span class="title">-rimraf</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> 前段 </tag>
            
            <tag> 博客 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Editor</title>
      <link href="/2016/09/12/2016-10-13/"/>
      <url>/2016/09/12/2016-10-13/</url>
      <content type="html"><![CDATA[<h1 id="Editor-md"><a href="#Editor-md" class="headerlink" title="Editor.md"></a>Editor.md</h1><p>md示例～</p><a id="more"></a><p><img src="https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png" alt=""></p><p><img src="https://img.shields.io/github/stars/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/github/forks/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/github/tag/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/github/release/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/github/issues/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/bower/v/editor.md.svg" alt=""></p><p><strong>目录 (Table of Contents)</strong></p><p>[TOCM]</p><p>[TOC]</p><h1 id="Heading-1"><a href="#Heading-1" class="headerlink" title="Heading 1"></a>Heading 1</h1><h2 id="Heading-2"><a href="#Heading-2" class="headerlink" title="Heading 2"></a>Heading 2</h2><h3 id="Heading-3"><a href="#Heading-3" class="headerlink" title="Heading 3"></a>Heading 3</h3><h4 id="Heading-4"><a href="#Heading-4" class="headerlink" title="Heading 4"></a>Heading 4</h4><h5 id="Heading-5"><a href="#Heading-5" class="headerlink" title="Heading 5"></a>Heading 5</h5><h6 id="Heading-6"><a href="#Heading-6" class="headerlink" title="Heading 6"></a>Heading 6</h6><h1 id="Heading-1-link-Heading-link"><a href="#Heading-1-link-Heading-link" class="headerlink" title="Heading 1 link Heading link"></a>Heading 1 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="noopener">Heading link</a></h1><h2 id="Heading-2-link-Heading-link"><a href="#Heading-2-link-Heading-link" class="headerlink" title="Heading 2 link Heading link"></a>Heading 2 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="noopener">Heading link</a></h2><h3 id="Heading-3-link-Heading-link"><a href="#Heading-3-link-Heading-link" class="headerlink" title="Heading 3 link Heading link"></a>Heading 3 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="noopener">Heading link</a></h3><h4 id="Heading-4-link-Heading-link-Heading-link-Heading-link"><a href="#Heading-4-link-Heading-link-Heading-link-Heading-link" class="headerlink" title="Heading 4 link Heading link Heading link Heading link"></a>Heading 4 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="noopener">Heading link</a> Heading link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="noopener">Heading link</a></h4><h5 id="Heading-5-link-Heading-link"><a href="#Heading-5-link-Heading-link" class="headerlink" title="Heading 5 link Heading link"></a>Heading 5 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="noopener">Heading link</a></h5><h6 id="Heading-6-link-Heading-link"><a href="#Heading-6-link-Heading-link" class="headerlink" title="Heading 6 link Heading link"></a>Heading 6 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="noopener">Heading link</a></h6><h4 id="标题（用底线的形式）Heading-underline"><a href="#标题（用底线的形式）Heading-underline" class="headerlink" title="标题（用底线的形式）Heading (underline)"></a>标题（用底线的形式）Heading (underline)</h4><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h3 id="字符效果和横线等"><a href="#字符效果和横线等" class="headerlink" title="字符效果和横线等"></a>字符效果和横线等</h3><hr><p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s><br><em>斜体字</em>      <em>斜体字</em><br><strong>粗体</strong>  <strong>粗体</strong><br><strong><em>粗斜体</em></strong> <strong><em>粗斜体</em></strong></p><p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p><p><strong>缩写(同HTML的abbr标签)</strong></p><blockquote><p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p></blockquote><p>The <abbr title="Hyper Text Markup Language">HTML</abbr> specification is maintained by the <abbr title="World Wide Web Consortium">W3C</abbr>.</p><h3 id="引用-Blockquotes"><a href="#引用-Blockquotes" class="headerlink" title="引用 Blockquotes"></a>引用 Blockquotes</h3><blockquote><p>引用文本 Blockquotes</p></blockquote><p>引用的行内混合 Blockquotes</p><blockquote><p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href="http://localhost/" target="_blank" rel="noopener">普通链接</a>。</p></blockquote><h3 id="锚点与链接-Links"><a href="#锚点与链接-Links" class="headerlink" title="锚点与链接 Links"></a>锚点与链接 Links</h3><p><a href="http://localhost/" target="_blank" rel="noopener">普通链接</a></p><p><a href="http://localhost/" title="普通链接带标题" target="_blank" rel="noopener">普通链接带标题</a></p><p>直接链接：<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></p><p><a href="http://www.this-anchor-link.com/" target="_blank" rel="noopener">锚点链接</a></p><p><a href="mailto:test.test@gmail.com" target="_blank" rel="noopener">mailto:test.test@gmail.com</a></p><p>GFM a-tail link @pandao  邮箱地址自动链接 <a href="mailto:test.test@gmail.com" target="_blank" rel="noopener">test.test@gmail.com</a>  <a href="mailto:www@vip.qq.com" target="_blank" rel="noopener">www@vip.qq.com</a></p><blockquote><p>@pandao</p></blockquote><h3 id="多语言代码高亮-Codes"><a href="#多语言代码高亮-Codes" class="headerlink" title="多语言代码高亮 Codes"></a>多语言代码高亮 Codes</h3><h4 id="行内代码-Inline-code"><a href="#行内代码-Inline-code" class="headerlink" title="行内代码 Inline code"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p><h4 id="缩进风格"><a href="#缩进风格" class="headerlink" title="缩进风格"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似 <code>&lt;pre&gt;</code> 预格式化文本 ( Preformatted Text ) 的功能。</p><pre><code>&lt;?php    echo &quot;Hello world!&quot;;?&gt;</code></pre><p>预格式化文本：</p><pre><code>| First Header  | Second Header || ------------- | ------------- || Content Cell  | Content Cell  || Content Cell  | Content Cell  |</code></pre><h4 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码　"></a>JS代码　</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> box = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> box.fn.init();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    box.prototype = box.fn = &#123;</span><br><span class="line">        init : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'box.init()'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">add : <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"add"</span>, str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">remove : <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"remove"</span>, str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    box.fn.init.prototype = box.fn;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.box =box;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testBox = box();</span><br><span class="line">testBox.add(<span class="string">"jQuery"</span>).remove(<span class="string">"jQuery"</span>);</span><br></pre></td></tr></table></figure><h4 id="HTML-代码-HTML-codes"><a href="#HTML-代码-HTML-codes" class="headerlink" title="HTML 代码 HTML codes"></a>HTML 代码 HTML codes</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mate</span> <span class="attr">charest</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"Editor.md, Markdown, Editor"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">body</span>&#123;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">color</span>:<span class="number">#444</span>;<span class="attribute">font-family</span>: <span class="string">"Microsoft Yahei"</span>, Tahoma, <span class="string">"Hiragino Sans GB"</span>, Arial;<span class="attribute">background</span>:<span class="number">#fff</span>;&#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span>&#123;<span class="attribute">list-style</span>: none;&#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">img</span>&#123;<span class="attribute">border</span>:none;<span class="attribute">vertical-align</span>: middle;&#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"text-xxl"</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-green"</span>&gt;</span>Plain text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="图片-Images"><a href="#图片-Images" class="headerlink" title="图片 Images"></a>图片 Images</h3><p>Image:</p><p><img src="https://pandao.github.io/editor.md/examples/images/4.jpg" alt=""></p><blockquote><p>Follow your heart.</p></blockquote><p><img src="https://pandao.github.io/editor.md/examples/images/8.jpg" alt=""></p><blockquote><p>图为：厦门白城沙滩</p></blockquote><p>图片加链接 (Image + Link)：</p><p><a href="https://pandao.github.io/editor.md/images/7.jpg" title="李健首张专辑《似水流年》封面" target="_blank" rel="noopener"><img src="https://pandao.github.io/editor.md/examples/images/7.jpg" alt=""></a></p><blockquote><p>图为：李健首张专辑《似水流年》封面</p></blockquote><hr><h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 Lists"></a>列表 Lists</h3><h4 id="无序列表（减号）Unordered-Lists"><a href="#无序列表（减号）Unordered-Lists" class="headerlink" title="无序列表（减号）Unordered Lists (-)"></a>无序列表（减号）Unordered Lists (-)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（星号）Unordered-Lists"><a href="#无序列表（星号）Unordered-Lists" class="headerlink" title="无序列表（星号）Unordered Lists (*)"></a>无序列表（星号）Unordered Lists (*)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（加号和嵌套）Unordered-Lists"><a href="#无序列表（加号和嵌套）Unordered-Lists" class="headerlink" title="无序列表（加号和嵌套）Unordered Lists (+)"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul><li>列表一</li><li>列表二<ul><li>列表二-1</li><li>列表二-2</li><li>列表二-3</li></ul></li><li>列表三<ul><li>列表一</li><li>列表二</li><li>列表三</li></ul></li></ul><h4 id="有序列表-Ordered-Lists"><a href="#有序列表-Ordered-Lists" class="headerlink" title="有序列表 Ordered Lists (-)"></a>有序列表 Ordered Lists (-)</h4><ol><li>第一行</li><li>第二行</li><li>第三行</li></ol><h4 id="GFM-task-list"><a href="#GFM-task-list" class="headerlink" title="GFM task list"></a>GFM task list</h4><ul><li>[x] GFM task list 1</li><li>[x] GFM task list 2</li><li>[ ] GFM task list 3<ul><li>[ ] GFM task list 3-1</li><li>[ ] GFM task list 3-2</li><li>[ ] GFM task list 3-3</li></ul></li><li>[ ] GFM task list 4<ul><li>[ ] GFM task list 4-1</li><li>[ ] GFM task list 4-2</li></ul></li></ul><hr><h3 id="绘制表格-Tables"><a href="#绘制表格-Tables" class="headerlink" title="绘制表格 Tables"></a>绘制表格 Tables</h3><table><thead><tr><th>项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td>计算机</td><td style="text-align:right">$1600</td><td style="text-align:center">5</td></tr><tr><td>手机</td><td style="text-align:right">$12</td><td style="text-align:center">12</td></tr><tr><td>管线</td><td style="text-align:right">$1</td><td style="text-align:center">234</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>Function name</th><th>Description</th></tr></thead><tbody><tr><td><code>help()</code></td><td>Display the help window.</td></tr><tr><td><code>destroy()</code></td><td><strong>Destroy your computer!</strong></td></tr></tbody></table><table><thead><tr><th style="text-align:left">Left-Aligned</th><th style="text-align:center">Center Aligned</th><th style="text-align:right">Right Aligned</th></tr></thead><tbody><tr><td style="text-align:left">col 3 is</td><td style="text-align:center">some wordy text</td><td style="text-align:right">$1600</td></tr><tr><td style="text-align:left">col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td style="text-align:left">zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table><table><thead><tr><th>Item</th><th style="text-align:right">Value</th></tr></thead><tbody><tr><td>Computer</td><td style="text-align:right">$1600</td></tr><tr><td>Phone</td><td style="text-align:right">$12</td></tr><tr><td>Pipe</td><td style="text-align:right">$1</td></tr></tbody></table><hr><h4 id="特殊符号-HTML-Entities-Codes"><a href="#特殊符号-HTML-Entities-Codes" class="headerlink" title="特殊符号 HTML Entities Codes"></a>特殊符号 HTML Entities Codes</h4><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;</p><p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p><p>18&ordm;C  &quot;  &apos;</p><p>[========]</p><h3 id="Emoji表情-smiley"><a href="#Emoji表情-smiley" class="headerlink" title="Emoji表情 :smiley:"></a>Emoji表情 :smiley:</h3><blockquote><p>Blockquotes :star:</p></blockquote><h4 id="GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x"><a href="#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x" class="headerlink" title="GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul><li>[x] :smiley: @mentions, :smiley: #refs, <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li><li>[x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li><li>[x] [ ] :smiley: this is a complete item :smiley:;</li><li>[ ] []this is an incomplete item <a href="#">test link</a> :fa-star: @pandao;</li><li>[ ] [ ]this is an incomplete item :fa-star: :fa-gear:;<ul><li>[ ] :smiley: this is an incomplete item <a href="#">test link</a> :fa-star: :fa-gear:;</li><li>[ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href="#">test link</a>;</li></ul></li></ul><h4 id="反斜杠-Escape"><a href="#反斜杠-Escape" class="headerlink" title="反斜杠 Escape"></a>反斜杠 Escape</h4><p>*literal asterisks*</p><p>[========]</p><h3 id="科学公式-TeX-KaTeX"><a href="#科学公式-TeX-KaTeX" class="headerlink" title="科学公式 TeX(KaTeX)"></a>科学公式 TeX(KaTeX)</h3><p>$$E=mc^2$$</p><p>行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。</p><p>$$x &gt; y$$</p><p>$$(\sqrt{3x-1}+(1+x)^2)$$</p><p>$$\sin(\alpha)^{\theta}=\sum_{i=0}^{n}(x^i + \cos(f))$$</p><p>多行公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\displaystyle</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n a\_k b\_k \right)^2</span><br><span class="line">\leq</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n a\_k^2 \right)</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n b\_k^2 \right)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\displaystyle</span><br><span class="line">    \frac&#123;1&#125;&#123;</span><br><span class="line">        \Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;</span><br><span class="line">        \frac25 \pi&#125;&#125; = 1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;</span><br><span class="line">        1+\frac&#123;e^&#123;-6\pi&#125;&#125;</span><br><span class="line">        &#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125;</span><br><span class="line">         &#123;1+\cdots&#125; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(x) = \int_&#123;-\infty&#125;^\infty</span><br><span class="line">    \hat f(\xi)\,e^&#123;2 \pi i \xi x&#125;</span><br><span class="line">    \,d\xi</span><br></pre></td></tr></table></figure><h3 id="分页符-Page-break"><a href="#分页符-Page-break" class="headerlink" title="分页符 Page break"></a>分页符 Page break</h3><blockquote><p>Print Test: Ctrl + P</p></blockquote><p>[========]</p><h3 id="绘制流程图-Flowchart"><a href="#绘制流程图-Flowchart" class="headerlink" title="绘制流程图 Flowchart"></a>绘制流程图 Flowchart</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 用户登陆</span><br><span class="line">op=&gt;operation: 登陆操作</span><br><span class="line">cond=&gt;condition: 登陆成功 Yes or No?</span><br><span class="line">e=&gt;end: 进入后台</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><p>[========]</p><h3 id="绘制序列图-Sequence-Diagram"><a href="#绘制序列图-Sequence-Diagram" class="headerlink" title="绘制序列图 Sequence Diagram"></a>绘制序列图 Sequence Diagram</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Andrew-&gt;China: Says Hello</span><br><span class="line">Note right of China: China thinks\nabout it</span><br><span class="line">China--&gt;Andrew: How are you?</span><br><span class="line">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></table></figure><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3>]]></content>
      
      
        <tags>
            
            <tag> Editor </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>node 安装</title>
      <link href="/2016/07/12/2016-10-17-10/"/>
      <url>/2016/07/12/2016-10-17-10/</url>
      <content type="html"><![CDATA[<h3 id="卸载node"><a href="#卸载node" class="headerlink" title="卸载node"></a>卸载node</h3><blockquote><p>$  nvm uninstall –lts<br>$  sudo apt-get remove nodejs<br>$  apt-get autoremove nodejs</p></blockquote><a id="more"></a><h3 id="删除node"><a href="#删除node" class="headerlink" title="删除node"></a>删除node</h3><blockquote><p>$  sudo find ~/ -name &lt;查找的文件名字&gt;</p></blockquote><h3 id="删除npm"><a href="#删除npm" class="headerlink" title="删除npm"></a>删除npm</h3><h3 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h3><blockquote><p>$  curl -o- https:###raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash</p></blockquote><h3 id="将这些信息复制到-bashrc-profile-or-zshrc中"><a href="#将这些信息复制到-bashrc-profile-or-zshrc中" class="headerlink" title="将这些信息复制到~/.bashrc, ~/.profile, or ~/.zshrc中"></a>将这些信息复制到~/.bashrc, ~/.profile, or ~/.zshrc中</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">NVM_DIR</span>=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; . <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> # This loads nvm</span><br></pre></td></tr></table></figure><h3 id="应用源文件"><a href="#应用源文件" class="headerlink" title="应用源文件"></a>应用源文件</h3><blockquote><p>$  source 　/.bashrc, ~/.profile, or ~/.zshrc</p></blockquote><h3 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a>验证安装是否成功</h3><blockquote><p>$  command -v nvm</p></blockquote><h3 id="查看所有的node版本"><a href="#查看所有的node版本" class="headerlink" title="查看所有的node版本"></a>查看所有的node版本</h3><blockquote><p>$  nvm ls-remote</p></blockquote><h3 id="安装node版本"><a href="#安装node版本" class="headerlink" title="安装node版本"></a>安装node版本</h3><blockquote><p>$  nvm install –lts　　</p></blockquote><h3 id="查看安装是否成功"><a href="#查看安装是否成功" class="headerlink" title="查看安装是否成功"></a>查看安装是否成功</h3><blockquote><p>$  node -v<br>$  npm -v</p></blockquote><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><blockquote><p>$  npm install -g hexo-cli</p></blockquote><h3 id="初始化博客信息"><a href="#初始化博客信息" class="headerlink" title="初始化博客信息"></a>初始化博客信息</h3><blockquote><p>$  hexo init <folder><br>$  cd <folder></folder></folder></p></blockquote><h3 id="安装博客需要的插件"><a href="#安装博客需要的插件" class="headerlink" title="安装博客需要的插件"></a>安装博客需要的插件</h3><blockquote><p>$  npm install</p></blockquote><h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><blockquote><p>$ hexo generate（hexo g也可以）</p></blockquote><h3 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h3><blockquote><p>$  hexo server<br>Hexo is running at <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>. Press <code>Ctrl+C</code> to stop.</p></blockquote><h3 id="建立Repository"><a href="#建立Repository" class="headerlink" title="建立Repository"></a>建立Repository</h3><blockquote><p>gedit  _config.yml</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">     <span class="attribute">type</span>: git</span><br><span class="line">     <span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:myoneray/myoneray.github.com.git</span><br><span class="line">     <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure><h3 id="然后执行命令："><a href="#然后执行命令：" class="headerlink" title="然后执行命令："></a>然后执行命令：</h3><blockquote><p>npm install hexo-deployer-git –save</p></blockquote><h3 id="设置当前node版本"><a href="#设置当前node版本" class="headerlink" title="设置当前node版本"></a>设置当前node版本</h3><blockquote><p>nvm use –delete-prefix v6.0.0</p></blockquote><h3 id="设置当前默认的node版本"><a href="#设置当前默认的node版本" class="headerlink" title="设置当前默认的node版本"></a>设置当前默认的node版本</h3><p>nvm alias default v6.0.0</p><h3 id="获取npm-安装的路径"><a href="#获取npm-安装的路径" class="headerlink" title="获取npm 安装的路径"></a>获取npm 安装的路径</h3><p>npm config get prefix</p><h3 id="查看当前PATH"><a href="#查看当前PATH" class="headerlink" title="查看当前PATH"></a>查看当前PATH</h3><p>echo  $PATH</p><h3 id="安装tree"><a href="#安装tree" class="headerlink" title="安装tree"></a>安装tree</h3><p>sudo apt-get install tree</p><h3 id="显示所有的npm-默认配置"><a href="#显示所有的npm-默认配置" class="headerlink" title="显示所有的npm　默认配置"></a>显示所有的npm　默认配置</h3><p>npm config ls -l</p><h3 id="显示npm配置"><a href="#显示npm配置" class="headerlink" title="显示npm配置"></a>显示npm配置</h3><p>npm config list</p><h3 id="npm找不到"><a href="#npm找不到" class="headerlink" title="npm找不到"></a>npm找不到</h3><p>n=$(which node);n=${n%/bin/node}; chmod -R 755 $n/bin/*; sudo cp -r $n/{bin,lib,share} /usr/local</p>]]></content>
      
      
        <tags>
            
            <tag> 前段 </tag>
            
            <tag> npm </tag>
            
            <tag> node </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>npm</title>
      <link href="/2016/02/17/2016-10-17-2/"/>
      <url>/2016/02/17/2016-10-17-2/</url>
      <content type="html"><![CDATA[<h3 id="淘宝镜像："><a href="#淘宝镜像：" class="headerlink" title="淘宝镜像："></a>淘宝镜像：</h3><blockquote><p>–registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p></blockquote><a id="more"></a><p>镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:</p><h5 id="1-通过config命令"><a href="#1-通过config命令" class="headerlink" title="1.通过config命令"></a>1.通过config命令</h5><blockquote><p>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>npm info underscore （如果上面配置正确这个命令会有字符串response）</p></blockquote><h5 id="2-命令行指定"><a href="#2-命令行指定" class="headerlink" title="2.命令行指定"></a>2.命令行指定</h5><blockquote><p>npm –registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> info underscore</p></blockquote><h5 id="3-编辑-npmrc-加入下面内容"><a href="#3-编辑-npmrc-加入下面内容" class="headerlink" title="3.编辑 ~/.npmrc 加入下面内容"></a>3.编辑 ~/.npmrc 加入下面内容</h5><blockquote><p>registry = <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p></blockquote><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h5 id="安装包，默认会安装最新的版本"><a href="#安装包，默认会安装最新的版本" class="headerlink" title="安装包，默认会安装最新的版本"></a>安装包，默认会安装最新的版本</h5><blockquote><p>npm install gulp</p></blockquote><h5 id="安装指定版本"><a href="#安装指定版本" class="headerlink" title="安装指定版本"></a>安装指定版本</h5><blockquote><p>npm install <a href="mailto:gulp@3.9.1" target="_blank" rel="noopener">gulp@3.9.1</a></p></blockquote><h5 id="S-–save-安装包信息将加入到dependencies（生产阶段的依赖）"><a href="#S-–save-安装包信息将加入到dependencies（生产阶段的依赖）" class="headerlink" title="-S, –save 安装包信息将加入到dependencies（生产阶段的依赖）"></a>-S, –save 安装包信息将加入到dependencies（生产阶段的依赖）</h5><blockquote><p>npm install gulp –save 或 npm install gulp -S</p></blockquote><h5 id="package-json-文件的-dependencies-字段："><a href="#package-json-文件的-dependencies-字段：" class="headerlink" title="package.json 文件的 dependencies 字段："></a>package.json 文件的 dependencies 字段：</h5><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.9.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="D-–save-dev-安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它"><a href="#D-–save-dev-安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它" class="headerlink" title="-D, –save-dev 安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它"></a>-D, –save-dev 安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它</h5><blockquote><p>npm install gulp –save-dev 或 npm install gulp -D<br>package.json 文件的 devDependencies字段：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.9.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="O-–save-optional-安装包信息将加入到optionalDependencies（可选阶段的依赖）"><a href="#O-–save-optional-安装包信息将加入到optionalDependencies（可选阶段的依赖）" class="headerlink" title="-O, –save-optional 安装包信息将加入到optionalDependencies（可选阶段的依赖）"></a>-O, –save-optional 安装包信息将加入到optionalDependencies（可选阶段的依赖）</h5><blockquote><p>npm install gulp –save-optional 或 npm install gulp -O<br>package.json 文件的optionalDependencies字段：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"optionalDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.9.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="E-–save-exact-精确安装指定模块版本"><a href="#E-–save-exact-精确安装指定模块版本" class="headerlink" title="-E, –save-exact 精确安装指定模块版本"></a>-E, –save-exact 精确安装指定模块版本</h5><blockquote><p>npm install gulp –save-exact 或 npm install gulp -E<br>输入命令npm install gulp -ES，留意package.json 文件的 dependencies 字段，以看出版本号中的^消失了<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"gulp"</span>: <span class="string">"3.9.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>模块的依赖都被写入了package.json文件后，他人打开项目的根目录（项目开源、内部团队合作），使用npm install命令可以根据dependencies配置安装所有的依赖包</p><blockquote><p>npm install</p></blockquote><h5 id="本地安装（local）"><a href="#本地安装（local）" class="headerlink" title="本地安装（local）"></a>本地安装（local）</h5><blockquote><p>npm install gulp</p></blockquote><h5 id="全局安装（global）-使用-g-或-–global"><a href="#全局安装（global）-使用-g-或-–global" class="headerlink" title="全局安装（global）,使用 -g 或 –global"></a>全局安装（global）,使用 -g 或 –global</h5><blockquote><p>npm install gulp -g<br>npm uninstall 卸载模块</p></blockquote><h5 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h5><blockquote><p>npm uninstall [&lt;@scope&gt;/]<pkg>[@<version>]… [-S|–save|-D|–save-dev|-O|–save-optional]<br>aliases: remove, rm, r, un, unlink</version></pkg></p></blockquote><h5 id="如卸载开发版本的模块"><a href="#如卸载开发版本的模块" class="headerlink" title="如卸载开发版本的模块"></a>如卸载开发版本的模块</h5><blockquote><p>npm uninstall gulp –save-dev</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> 前段 </tag>
            
            <tag> note </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack</title>
      <link href="/2016/02/16/2016-10-19/"/>
      <url>/2016/02/16/2016-10-19/</url>
      <content type="html"><![CDATA[<p>Webpack！<br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample progect），在终端中转到该文件夹后执行下述指令就可以完成安装。</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局安装</span></span><br><span class="line">npm install -g webpack</span><br><span class="line"><span class="comment">//安装到你的项目目录</span></span><br><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> webpack</span><br></pre></td></tr></table></figure><h3 id="正式使用Webpack前的准备"><a href="#正式使用Webpack前的准备" class="headerlink" title="正式使用Webpack前的准备"></a>正式使用Webpack前的准备</h3>]]></content>
      
      
        <tags>
            
            <tag> 前段 </tag>
            
            <tag> 博客 </tag>
            
            <tag> 经验 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
